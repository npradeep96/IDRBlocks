{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNtHAMWKxIILSShx7X0OZ8r",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "b1a650b9301f457997d8072b60764885": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_55c88b28e7ed46868f5a3988a83fa757",
              "IPY_MODEL_d1858a80a8b2464aa32ebcc5b92132b2",
              "IPY_MODEL_842d62454b0b432f9a5ba9f88f2367a9"
            ],
            "layout": "IPY_MODEL_d20983c840f046329cc2504c744da28e"
          }
        },
        "1cfc4210e6c84351a1cc1a8d080e4b9d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0c34070275704957b57fcb2424376c88",
            "placeholder": "​",
            "style": "IPY_MODEL_637a1f035b5b4e6a8a849175394246b7",
            "value": "<center> <img\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.svg\nalt='Hugging Face'> <br> Copy a token from <a\nhref=\"https://huggingface.co/settings/tokens\" target=\"_blank\">your Hugging Face\ntokens page</a> and paste it below. <br> Immediately click login after copying\nyour token or it might be stored in plain text in this notebook file. </center>"
          }
        },
        "f13f3af2520f492f903ce12cb4df842f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "PasswordModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "PasswordModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "PasswordView",
            "continuous_update": true,
            "description": "Token:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_6c84196fc84e4236920b3a0abe1f30f2",
            "placeholder": "​",
            "style": "IPY_MODEL_77c620428b244659b0ec898540891067",
            "value": ""
          }
        },
        "a04b5c88c7714f698aaacd1de9a86a66": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Add token as git credential?",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_53bb24b0d025499ab65ef3f7062c90b2",
            "style": "IPY_MODEL_691a26b6fe5243f1afcab86428907650",
            "value": false
          }
        },
        "0a255537a2544f11b5602ecf397d04fe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Login",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_ed0486d31ee5486b95682ac20ba8f774",
            "style": "IPY_MODEL_fef2f32ca24a4c719217f496fef9cf40",
            "tooltip": ""
          }
        },
        "16480be733c540b7bfcb49663c682d33": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_71cdb154fc76442f9d69c30dc03edca7",
            "placeholder": "​",
            "style": "IPY_MODEL_0cfb8d0de031425cb0ba745dbddce9e1",
            "value": "\n<b>Pro Tip:</b> If you don't already have one, you can create a dedicated\n'notebooks' token with 'write' access, that you can then easily reuse for all\nnotebooks. </center>"
          }
        },
        "d20983c840f046329cc2504c744da28e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": "center",
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "flex",
            "flex": null,
            "flex_flow": "column",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "50%"
          }
        },
        "0c34070275704957b57fcb2424376c88": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "637a1f035b5b4e6a8a849175394246b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6c84196fc84e4236920b3a0abe1f30f2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "77c620428b244659b0ec898540891067": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "53bb24b0d025499ab65ef3f7062c90b2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "691a26b6fe5243f1afcab86428907650": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ed0486d31ee5486b95682ac20ba8f774": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fef2f32ca24a4c719217f496fef9cf40": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "71cdb154fc76442f9d69c30dc03edca7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0cfb8d0de031425cb0ba745dbddce9e1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8fee6032c1304475a18ef8226f59c010": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_eb1c31ae41754153915a44a4701904d8",
            "placeholder": "​",
            "style": "IPY_MODEL_e73cf3f5aa15460ebe4c4d3936cfc0dc",
            "value": "Connecting..."
          }
        },
        "eb1c31ae41754153915a44a4701904d8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e73cf3f5aa15460ebe4c4d3936cfc0dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "55c88b28e7ed46868f5a3988a83fa757": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_db7346985cb048e8b58d55f6f38f83a0",
            "placeholder": "​",
            "style": "IPY_MODEL_4a59dadf9d104f6ba61512d50fe64c3f",
            "value": "Token is valid (permission: read)."
          }
        },
        "d1858a80a8b2464aa32ebcc5b92132b2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ca06a1c252b74bfa827a0c171ae0824c",
            "placeholder": "​",
            "style": "IPY_MODEL_56fbe9e77cc1424195fc33737c7874d9",
            "value": "Your token has been saved to /root/.cache/huggingface/token"
          }
        },
        "842d62454b0b432f9a5ba9f88f2367a9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6fc6f0e09c9948d1a3457a06a2288a98",
            "placeholder": "​",
            "style": "IPY_MODEL_0c0d4537459b4f1cbe8f5a7e94ce5ca9",
            "value": "Login successful"
          }
        },
        "db7346985cb048e8b58d55f6f38f83a0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4a59dadf9d104f6ba61512d50fe64c3f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ca06a1c252b74bfa827a0c171ae0824c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "56fbe9e77cc1424195fc33737c7874d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6fc6f0e09c9948d1a3457a06a2288a98": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0c0d4537459b4f1cbe8f5a7e94ce5ca9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/npradeep96/IDRBlocks/blob/master/Generate_process_data.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mount data\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "%cd '/content/drive/My Drive/Colab Notebooks/ML_for_IDRs'\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MckGIds0Y5VF",
        "outputId": "709af745-e9d1-4d97-f10c-43037f94a61a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "/content/drive/My Drive/Colab Notebooks/ML_for_IDRs\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "! pip install biopython\n",
        "from Bio import SeqIO\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "import itertools\n",
        "from tqdm import tqdm"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rDcXXIM-Z6P3",
        "outputId": "6625430f-c320-4b90-d3c4-7ee16765a102"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting biopython\n",
            "  Downloading biopython-1.83-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/3.1 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.2/3.1 MB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m57.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m43.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from biopython) (1.25.2)\n",
            "Installing collected packages: biopython\n",
            "Successfully installed biopython-1.83\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch import nn\n",
        "from torch.nn import functional as F\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelBinarizer\n",
        "from sklearn.metrics import roc_auc_score, r2_score\n",
        "from sklearn.utils import shuffle\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import confusion_matrix"
      ],
      "metadata": {
        "id": "WD1bTX5Xj3RF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib\n",
        "matplotlib.rcParams.update({'font.size': 15})\n",
        "matplotlib.rc('lines', linewidth=3, color='g')\n",
        "matplotlib.rcParams['axes.linewidth'] = 2.0\n",
        "matplotlib.rcParams['axes.linewidth'] = 2.0\n",
        "matplotlib.rcParams[\"xtick.major.size\"] = 6\n",
        "matplotlib.rcParams[\"ytick.major.size\"] = 6\n",
        "matplotlib.rcParams[\"ytick.major.width\"] = 2\n",
        "matplotlib.rcParams[\"xtick.major.width\"] = 2\n",
        "matplotlib.rcParams['text.usetex'] = False"
      ],
      "metadata": {
        "id": "uKKu9eJXj70S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Make pandas dataset for IDR sequence-derived features and run a Neural Network for classification"
      ],
      "metadata": {
        "id": "FSSCFfthkOtD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_matrix_idr_features = pd.read_csv('/content/drive/My Drive/Colab Notebooks/ML_for_IDRs/data_matrix.csv')\n",
        "data_matrix_idr_features.head(10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 418
        },
        "id": "5uh9wxtHaFH9",
        "outputId": "70960bc9-9100-4165-c71a-6ae178ddd26e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Uniprot ID                                  IDR Sequence List  \\\n",
              "0     Q8WUM0         ['FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL']   \n",
              "1     Q9NVP1  ['NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQ...   \n",
              "2     Q8N7H5  ['DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQ...   \n",
              "3     Q8WUA4  ['SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRR...   \n",
              "4     Q8WVC0  ['ADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSES...   \n",
              "5     P55884  ['QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEA...   \n",
              "6     Q9Y5Q8  ['LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSEN...   \n",
              "7     P55081  ['SVPSALMKQPPIQSTAGAVPVRNEKG', 'VSGKRPDYAPMESS...   \n",
              "8     Q9UBU9  ['ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGS...   \n",
              "9     Q8IX01  ['SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSI', 'RATTGTQT...   \n",
              "\n",
              "                               IDR Sequence Combined  IDR Count  \\\n",
              "0             FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL        1.0   \n",
              "1  NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQEA...        1.0   \n",
              "2  DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQAQ...        1.0   \n",
              "3  SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRRLP...        2.0   \n",
              "4  ADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSESDQ...        3.0   \n",
              "5  QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAAG...        1.0   \n",
              "6  LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSENEM...        1.0   \n",
              "7  SVPSALMKQPPIQSTAGAVPVRNEKGVSGKRPDYAPMESSDEEDEE...        2.0   \n",
              "8  ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGSGI...        1.0   \n",
              "9  SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSIRATTGTQTLLSSGT...        3.0   \n",
              "\n",
              "   Total IDR Length  Fraction Positive  Fraction Negative  Fraction Expanding  \\\n",
              "0              38.0           0.157895           0.000000            0.368379   \n",
              "1             138.0           0.181159           0.181159            0.405402   \n",
              "2             102.0           0.078431           0.313725            0.414803   \n",
              "3             255.0           0.164706           0.149020            0.479416   \n",
              "4             456.0           0.120614           0.346491            0.509185   \n",
              "5             157.0           0.050955           0.248408            0.446737   \n",
              "6              54.0           0.055556           0.444444            0.518157   \n",
              "7             178.0           0.146067           0.331461            0.528732   \n",
              "8              84.0           0.226190           0.178571            0.466120   \n",
              "9             198.0           0.070707           0.202020            0.417808   \n",
              "\n",
              "        FCR      NCPR     Kappa     Omega  Isoelectric Point  \\\n",
              "0  0.157852  0.157852  0.242429  0.053462          14.499987   \n",
              "1  0.361924 -0.000133  0.402122  0.181223           7.000000   \n",
              "2  0.395195 -0.231872  0.253720  0.121241           3.609375   \n",
              "3  0.314710  0.015757  0.320499  0.070002           8.750000   \n",
              "4  0.471904 -0.220657  0.226271  0.102102           3.882812   \n",
              "5  0.300240 -0.196211  0.111375  0.037347           3.500000   \n",
              "6  0.499638 -0.388703  0.604509  0.300250           3.281250   \n",
              "7  0.478170 -0.184310  0.343609  0.075862           3.937500   \n",
              "8  0.406597  0.049555  0.325540  0.053614          10.062500   \n",
              "9  0.276394 -0.128340  0.290060  0.155521           3.937500   \n",
              "\n",
              "   Uversky Hydropathy  PPII Propensity     Delta  Delta Max         SCD  \\\n",
              "0            0.433333         0.426842  0.023065   0.095141    1.334377   \n",
              "1            0.340419         0.391667  0.139929   0.347977   -3.062043   \n",
              "2            0.314270         0.315980  0.070581   0.278184   14.806040   \n",
              "3            0.371373         0.448118  0.097659   0.304710   -3.284487   \n",
              "4            0.276827         0.360570  0.084354   0.372802  127.322525   \n",
              "5            0.389314         0.435223  0.024696   0.221737   21.077413   \n",
              "6            0.328189         0.349630  0.149423   0.247181   11.883401   \n",
              "7            0.327778         0.392191  0.138866   0.404138   17.644652   \n",
              "8            0.298942         0.354048  0.123157   0.378316   -1.146155   \n",
              "9            0.390685         0.405758  0.066557   0.229458    4.407218   \n",
              "\n",
              "   Log Partition Ratios  \n",
              "0             10.371906  \n",
              "1              9.565771  \n",
              "2              9.189393  \n",
              "3              9.121233  \n",
              "4              9.007168  \n",
              "5              8.627768  \n",
              "6              7.997080  \n",
              "7              7.713330  \n",
              "8              7.690745  \n",
              "9              7.650883  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-94ed6a22-706d-46c0-968f-d725d0343082\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Uniprot ID</th>\n",
              "      <th>IDR Sequence List</th>\n",
              "      <th>IDR Sequence Combined</th>\n",
              "      <th>IDR Count</th>\n",
              "      <th>Total IDR Length</th>\n",
              "      <th>Fraction Positive</th>\n",
              "      <th>Fraction Negative</th>\n",
              "      <th>Fraction Expanding</th>\n",
              "      <th>FCR</th>\n",
              "      <th>NCPR</th>\n",
              "      <th>Kappa</th>\n",
              "      <th>Omega</th>\n",
              "      <th>Isoelectric Point</th>\n",
              "      <th>Uversky Hydropathy</th>\n",
              "      <th>PPII Propensity</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Delta Max</th>\n",
              "      <th>SCD</th>\n",
              "      <th>Log Partition Ratios</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Q8WUM0</td>\n",
              "      <td>['FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL']</td>\n",
              "      <td>FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL</td>\n",
              "      <td>1.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>0.157895</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.368379</td>\n",
              "      <td>0.157852</td>\n",
              "      <td>0.157852</td>\n",
              "      <td>0.242429</td>\n",
              "      <td>0.053462</td>\n",
              "      <td>14.499987</td>\n",
              "      <td>0.433333</td>\n",
              "      <td>0.426842</td>\n",
              "      <td>0.023065</td>\n",
              "      <td>0.095141</td>\n",
              "      <td>1.334377</td>\n",
              "      <td>10.371906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Q9NVP1</td>\n",
              "      <td>['NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQ...</td>\n",
              "      <td>NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQEA...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>0.181159</td>\n",
              "      <td>0.181159</td>\n",
              "      <td>0.405402</td>\n",
              "      <td>0.361924</td>\n",
              "      <td>-0.000133</td>\n",
              "      <td>0.402122</td>\n",
              "      <td>0.181223</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.340419</td>\n",
              "      <td>0.391667</td>\n",
              "      <td>0.139929</td>\n",
              "      <td>0.347977</td>\n",
              "      <td>-3.062043</td>\n",
              "      <td>9.565771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Q8N7H5</td>\n",
              "      <td>['DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQ...</td>\n",
              "      <td>DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQAQ...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>0.078431</td>\n",
              "      <td>0.313725</td>\n",
              "      <td>0.414803</td>\n",
              "      <td>0.395195</td>\n",
              "      <td>-0.231872</td>\n",
              "      <td>0.253720</td>\n",
              "      <td>0.121241</td>\n",
              "      <td>3.609375</td>\n",
              "      <td>0.314270</td>\n",
              "      <td>0.315980</td>\n",
              "      <td>0.070581</td>\n",
              "      <td>0.278184</td>\n",
              "      <td>14.806040</td>\n",
              "      <td>9.189393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Q8WUA4</td>\n",
              "      <td>['SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRR...</td>\n",
              "      <td>SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRRLP...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>255.0</td>\n",
              "      <td>0.164706</td>\n",
              "      <td>0.149020</td>\n",
              "      <td>0.479416</td>\n",
              "      <td>0.314710</td>\n",
              "      <td>0.015757</td>\n",
              "      <td>0.320499</td>\n",
              "      <td>0.070002</td>\n",
              "      <td>8.750000</td>\n",
              "      <td>0.371373</td>\n",
              "      <td>0.448118</td>\n",
              "      <td>0.097659</td>\n",
              "      <td>0.304710</td>\n",
              "      <td>-3.284487</td>\n",
              "      <td>9.121233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Q8WVC0</td>\n",
              "      <td>['ADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSES...</td>\n",
              "      <td>ADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSESDQ...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>456.0</td>\n",
              "      <td>0.120614</td>\n",
              "      <td>0.346491</td>\n",
              "      <td>0.509185</td>\n",
              "      <td>0.471904</td>\n",
              "      <td>-0.220657</td>\n",
              "      <td>0.226271</td>\n",
              "      <td>0.102102</td>\n",
              "      <td>3.882812</td>\n",
              "      <td>0.276827</td>\n",
              "      <td>0.360570</td>\n",
              "      <td>0.084354</td>\n",
              "      <td>0.372802</td>\n",
              "      <td>127.322525</td>\n",
              "      <td>9.007168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>P55884</td>\n",
              "      <td>['QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEA...</td>\n",
              "      <td>QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAAG...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>0.050955</td>\n",
              "      <td>0.248408</td>\n",
              "      <td>0.446737</td>\n",
              "      <td>0.300240</td>\n",
              "      <td>-0.196211</td>\n",
              "      <td>0.111375</td>\n",
              "      <td>0.037347</td>\n",
              "      <td>3.500000</td>\n",
              "      <td>0.389314</td>\n",
              "      <td>0.435223</td>\n",
              "      <td>0.024696</td>\n",
              "      <td>0.221737</td>\n",
              "      <td>21.077413</td>\n",
              "      <td>8.627768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Q9Y5Q8</td>\n",
              "      <td>['LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSEN...</td>\n",
              "      <td>LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSENEM...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.055556</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.518157</td>\n",
              "      <td>0.499638</td>\n",
              "      <td>-0.388703</td>\n",
              "      <td>0.604509</td>\n",
              "      <td>0.300250</td>\n",
              "      <td>3.281250</td>\n",
              "      <td>0.328189</td>\n",
              "      <td>0.349630</td>\n",
              "      <td>0.149423</td>\n",
              "      <td>0.247181</td>\n",
              "      <td>11.883401</td>\n",
              "      <td>7.997080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P55081</td>\n",
              "      <td>['SVPSALMKQPPIQSTAGAVPVRNEKG', 'VSGKRPDYAPMESS...</td>\n",
              "      <td>SVPSALMKQPPIQSTAGAVPVRNEKGVSGKRPDYAPMESSDEEDEE...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>0.146067</td>\n",
              "      <td>0.331461</td>\n",
              "      <td>0.528732</td>\n",
              "      <td>0.478170</td>\n",
              "      <td>-0.184310</td>\n",
              "      <td>0.343609</td>\n",
              "      <td>0.075862</td>\n",
              "      <td>3.937500</td>\n",
              "      <td>0.327778</td>\n",
              "      <td>0.392191</td>\n",
              "      <td>0.138866</td>\n",
              "      <td>0.404138</td>\n",
              "      <td>17.644652</td>\n",
              "      <td>7.713330</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Q9UBU9</td>\n",
              "      <td>['ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGS...</td>\n",
              "      <td>ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGSGI...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>0.226190</td>\n",
              "      <td>0.178571</td>\n",
              "      <td>0.466120</td>\n",
              "      <td>0.406597</td>\n",
              "      <td>0.049555</td>\n",
              "      <td>0.325540</td>\n",
              "      <td>0.053614</td>\n",
              "      <td>10.062500</td>\n",
              "      <td>0.298942</td>\n",
              "      <td>0.354048</td>\n",
              "      <td>0.123157</td>\n",
              "      <td>0.378316</td>\n",
              "      <td>-1.146155</td>\n",
              "      <td>7.690745</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Q8IX01</td>\n",
              "      <td>['SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSI', 'RATTGTQT...</td>\n",
              "      <td>SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSIRATTGTQTLLSSGT...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>198.0</td>\n",
              "      <td>0.070707</td>\n",
              "      <td>0.202020</td>\n",
              "      <td>0.417808</td>\n",
              "      <td>0.276394</td>\n",
              "      <td>-0.128340</td>\n",
              "      <td>0.290060</td>\n",
              "      <td>0.155521</td>\n",
              "      <td>3.937500</td>\n",
              "      <td>0.390685</td>\n",
              "      <td>0.405758</td>\n",
              "      <td>0.066557</td>\n",
              "      <td>0.229458</td>\n",
              "      <td>4.407218</td>\n",
              "      <td>7.650883</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-94ed6a22-706d-46c0-968f-d725d0343082')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-94ed6a22-706d-46c0-968f-d725d0343082 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-94ed6a22-706d-46c0-968f-d725d0343082');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0fe52743-cbf5-4438-8784-f850d4959496\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0fe52743-cbf5-4438-8784-f850d4959496')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0fe52743-cbf5-4438-8784-f850d4959496 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data_matrix_idr_features",
              "summary": "{\n  \"name\": \"data_matrix_idr_features\",\n  \"rows\": 1832,\n  \"fields\": [\n    {\n      \"column\": \"Uniprot ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1831,\n        \"samples\": [\n          \"Q9H4L7\",\n          \"Q86V48\",\n          \"Q9HBI1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IDR Sequence List\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1831,\n        \"samples\": [\n          \"['NLFNLDRFRFEKRNKIEEAPEATPQPSQPGPSSPISLSAEEENAEGEVSRANTPDSDITEKTEDSSVPETPDNERKASISY', 'GPRKRKLSSSSEPYEEDEFNDDQSIKKTRLDHGEESNESAESSSNWEK', 'QSEVPNGKEVSSRSQNYPKNATKTKL']\",\n          \"['SSTLPSKESRRKGGLDYLKQVENETRNKSENEKNRNQEDNKVKDL', 'EGEDAFLSSKGRHERTKFRGHGSEASVSKHTARELSPQHKRERLRNREFALNNENYSLSNRQVSSPSFTNRRAAKASHMGVSTDSGTQETKKTEDRFVPGSSQSEGKKSREQPSVLSRYPPAAQEHSKAWKGTSKPGTESGLKGKVEKTTRTFSDTTHGSVPSDPLGRADKASDTSSETVFGKRGHVL', 'SRRSSSEGLSKGKKAANGLEADNSCPNSKAP', 'TTITPEPEPKPQPNSREKAKTRGAPRTSLFENDKDAGMENESVKSVRASTNTMELPDTNGAGVKSQRPFSP', 'GSGTETTLEKQKPVSKPGPNKVTSSITIYPSDSSSPRAAPGEALRERHT', 'DGPLKDRPETVVSRSSIIIKPSDPVERNSHAPPAETIRWKSHSAPSEVGFS', 'LKSLEDPPTRIGKNVESTNSNAYTQRSSTDFSELEQPRSCLFEQGTRRVGPSSGDAPEPSSRRTQSSLT', 'LDPSELPGKQGLPESGRVRAEERLRPTRPCAEEN']\",\n          \"['SSAPRSPTPRPRRMKKDESFLGKLGGTLARKRRAREVSDLQEEGKNAINSPMSPAL']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IDR Sequence Combined\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1831,\n        \"samples\": [\n          \"NLFNLDRFRFEKRNKIEEAPEATPQPSQPGPSSPISLSAEEENAEGEVSRANTPDSDITEKTEDSSVPETPDNERKASISYGPRKRKLSSSSEPYEEDEFNDDQSIKKTRLDHGEESNESAESSSNWEKQSEVPNGKEVSSRSQNYPKNATKTKL\",\n          \"SSTLPSKESRRKGGLDYLKQVENETRNKSENEKNRNQEDNKVKDLEGEDAFLSSKGRHERTKFRGHGSEASVSKHTARELSPQHKRERLRNREFALNNENYSLSNRQVSSPSFTNRRAAKASHMGVSTDSGTQETKKTEDRFVPGSSQSEGKKSREQPSVLSRYPPAAQEHSKAWKGTSKPGTESGLKGKVEKTTRTFSDTTHGSVPSDPLGRADKASDTSSETVFGKRGHVLSRRSSSEGLSKGKKAANGLEADNSCPNSKAPTTITPEPEPKPQPNSREKAKTRGAPRTSLFENDKDAGMENESVKSVRASTNTMELPDTNGAGVKSQRPFSPGSGTETTLEKQKPVSKPGPNKVTSSITIYPSDSSSPRAAPGEALRERHTDGPLKDRPETVVSRSSIIIKPSDPVERNSHAPPAETIRWKSHSAPSEVGFSLKSLEDPPTRIGKNVESTNSNAYTQRSSTDFSELEQPRSCLFEQGTRRVGPSSGDAPEPSSRRTQSSLTLDPSELPGKQGLPESGRVRAEERLRPTRPCAEEN\",\n          \"SSAPRSPTPRPRRMKKDESFLGKLGGTLARKRRAREVSDLQEEGKNAINSPMSPAL\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IDR Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1069190520714405,\n        \"min\": 1.0,\n        \"max\": 24.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1.0,\n          2.0,\n          12.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total IDR Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 267.5448936437072,\n        \"min\": 25.0,\n        \"max\": 3108.0,\n        \"num_unique_values\": 491,\n        \"samples\": [\n          478.0,\n          323.0,\n          393.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Positive\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08275398186691889,\n        \"min\": 0.0,\n        \"max\": 0.5142857142857142,\n        \"num_unique_values\": 1119,\n        \"samples\": [\n          0.3788546255506608,\n          0.1410788381742738,\n          0.1487341772151898\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Negative\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10064304606334057,\n        \"min\": 0.0,\n        \"max\": 0.76,\n        \"num_unique_values\": 1184,\n        \"samples\": [\n          0.1291512915129151,\n          0.1940298507462686,\n          0.1702127659574468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Expanding\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10516576851288932,\n        \"min\": 0.0525211262111143,\n        \"max\": 0.8363105379987722,\n        \"num_unique_values\": 1830,\n        \"samples\": [\n          0.4395221694894314,\n          0.3919290335000424,\n          0.4462119877743561\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12883271377226352,\n        \"min\": 0.0,\n        \"max\": 0.8363105379987722,\n        \"num_unique_values\": 1827,\n        \"samples\": [\n          0.355651201747496,\n          0.3082859108234625,\n          0.0826437612111246\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCPR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1314950715242,\n        \"min\": -0.7594319210814742,\n        \"max\": 0.4638837359390323,\n        \"num_unique_values\": 1827,\n        \"samples\": [\n          -0.0698999576759967,\n          0.0365462539713619,\n          -0.0209906447203551\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kappa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14724684164662952,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1824,\n        \"samples\": [\n          0.1465140564347508,\n          0.4806334898271581,\n          0.2422715956730696\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Omega\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1217769494237063,\n        \"min\": 0.0054224325437596,\n        \"max\": 1.192245615696082,\n        \"num_unique_values\": 1831,\n        \"samples\": [\n          0.0589550019626419,\n          0.0905266036106172,\n          0.1294405696368604\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Isoelectric Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.204692176615133,\n        \"min\": 1.75,\n        \"max\": 14.49998664855957,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          3.8828125,\n          2.625,\n          5.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Uversky Hydropathy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05324124783297753,\n        \"min\": 0.1439276485788114,\n        \"max\": 0.5341563786008231,\n        \"num_unique_values\": 1819,\n        \"samples\": [\n          0.3574387947269304,\n          0.3428973277074543,\n          0.2992658730158727\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PPII Propensity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.050110884039986335,\n        \"min\": 0.1831067961165048,\n        \"max\": 0.6716000000000001,\n        \"num_unique_values\": 1818,\n        \"samples\": [\n          0.3805263157894741,\n          0.4435666666666664,\n          0.3806964285714281\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04206791009557511,\n        \"min\": 0.0,\n        \"max\": 0.3499069863841052,\n        \"num_unique_values\": 1825,\n        \"samples\": [\n          0.0302207851590567,\n          0.1004747478012914,\n          0.0579612268366355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta Max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11842925598735847,\n        \"min\": 0.0,\n        \"max\": 0.8185418640522869,\n        \"num_unique_values\": 1765,\n        \"samples\": [\n          0.2403207603186942,\n          0.234624703385729,\n          0.1515871863053092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.864037586756954,\n        \"min\": -55.42732875634679,\n        \"max\": 839.7960753274824,\n        \"num_unique_values\": 1816,\n        \"samples\": [\n          0.3156540726764355,\n          -1.3688742983319304,\n          204.1436403990957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Partition Ratios\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.9810804854983424,\n        \"min\": -6.835414998,\n        \"max\": 10.3719059,\n        \"num_unique_values\": 1831,\n        \"samples\": [\n          3.634898705,\n          -1.458619677,\n          -3.016051596\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_matrix_idr_features.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "6dKfT_pie2Sm",
        "outputId": "823a3a85-0a88-4459-e83f-322164cb6287"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         IDR Count  Total IDR Length  Fraction Positive  Fraction Negative  \\\n",
              "count  1832.000000       1832.000000        1832.000000        1832.000000   \n",
              "mean      2.293668        190.222162           0.143337           0.155362   \n",
              "std       2.106919        267.544894           0.082754           0.100643   \n",
              "min       1.000000         25.000000           0.000000           0.000000   \n",
              "25%       1.000000         48.000000           0.084389           0.086957   \n",
              "50%       2.000000        103.000000           0.132796           0.137931   \n",
              "75%       3.000000        226.000000           0.187500           0.200000   \n",
              "max      24.000000       3108.000000           0.514286           0.760000   \n",
              "\n",
              "       Fraction Expanding          FCR         NCPR        Kappa        Omega  \\\n",
              "count         1832.000000  1832.000000  1832.000000  1832.000000  1832.000000   \n",
              "mean             0.416545     0.301813    -0.009218     0.248728     0.170126   \n",
              "std              0.105166     0.128833     0.131495     0.147247     0.121777   \n",
              "min              0.052521     0.000000    -0.759432    -1.000000     0.005422   \n",
              "25%              0.352250     0.213889    -0.064195     0.170169     0.101439   \n",
              "50%              0.413697     0.290191     0.002304     0.226925     0.144121   \n",
              "75%              0.479737     0.375887     0.058752     0.308180     0.204779   \n",
              "max              0.836311     0.836311     0.463884     1.000000     1.192246   \n",
              "\n",
              "       Isoelectric Point  Uversky Hydropathy  PPII Propensity        Delta  \\\n",
              "count        1832.000000         1832.000000      1832.000000  1832.000000   \n",
              "mean            7.562398            0.355894         0.408230     0.059863   \n",
              "std             3.204692            0.053241         0.050111     0.042068   \n",
              "min             1.750000            0.143928         0.183107     0.000000   \n",
              "25%             4.375000            0.325178         0.379016     0.030376   \n",
              "50%             7.000000            0.360875         0.405771     0.049537   \n",
              "75%            10.062500            0.391704         0.435684     0.078264   \n",
              "max            14.499987            0.534156         0.671600     0.349907   \n",
              "\n",
              "         Delta Max          SCD  Log Partition Ratios  \n",
              "count  1832.000000  1832.000000           1832.000000  \n",
              "mean      0.242669     3.667438              0.252371  \n",
              "std       0.118429    24.864038              2.981080  \n",
              "min       0.000000   -55.427329             -6.835415  \n",
              "25%       0.161390    -0.727035             -1.862596  \n",
              "50%       0.234057     0.056790              0.119152  \n",
              "75%       0.310657     2.041941              2.414201  \n",
              "max       0.818542   839.796075             10.371906  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9ae3d88e-6e90-451a-a6a2-78d205a1a8ed\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDR Count</th>\n",
              "      <th>Total IDR Length</th>\n",
              "      <th>Fraction Positive</th>\n",
              "      <th>Fraction Negative</th>\n",
              "      <th>Fraction Expanding</th>\n",
              "      <th>FCR</th>\n",
              "      <th>NCPR</th>\n",
              "      <th>Kappa</th>\n",
              "      <th>Omega</th>\n",
              "      <th>Isoelectric Point</th>\n",
              "      <th>Uversky Hydropathy</th>\n",
              "      <th>PPII Propensity</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Delta Max</th>\n",
              "      <th>SCD</th>\n",
              "      <th>Log Partition Ratios</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "      <td>1832.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.293668</td>\n",
              "      <td>190.222162</td>\n",
              "      <td>0.143337</td>\n",
              "      <td>0.155362</td>\n",
              "      <td>0.416545</td>\n",
              "      <td>0.301813</td>\n",
              "      <td>-0.009218</td>\n",
              "      <td>0.248728</td>\n",
              "      <td>0.170126</td>\n",
              "      <td>7.562398</td>\n",
              "      <td>0.355894</td>\n",
              "      <td>0.408230</td>\n",
              "      <td>0.059863</td>\n",
              "      <td>0.242669</td>\n",
              "      <td>3.667438</td>\n",
              "      <td>0.252371</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.106919</td>\n",
              "      <td>267.544894</td>\n",
              "      <td>0.082754</td>\n",
              "      <td>0.100643</td>\n",
              "      <td>0.105166</td>\n",
              "      <td>0.128833</td>\n",
              "      <td>0.131495</td>\n",
              "      <td>0.147247</td>\n",
              "      <td>0.121777</td>\n",
              "      <td>3.204692</td>\n",
              "      <td>0.053241</td>\n",
              "      <td>0.050111</td>\n",
              "      <td>0.042068</td>\n",
              "      <td>0.118429</td>\n",
              "      <td>24.864038</td>\n",
              "      <td>2.981080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.052521</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.759432</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.005422</td>\n",
              "      <td>1.750000</td>\n",
              "      <td>0.143928</td>\n",
              "      <td>0.183107</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-55.427329</td>\n",
              "      <td>-6.835415</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>48.000000</td>\n",
              "      <td>0.084389</td>\n",
              "      <td>0.086957</td>\n",
              "      <td>0.352250</td>\n",
              "      <td>0.213889</td>\n",
              "      <td>-0.064195</td>\n",
              "      <td>0.170169</td>\n",
              "      <td>0.101439</td>\n",
              "      <td>4.375000</td>\n",
              "      <td>0.325178</td>\n",
              "      <td>0.379016</td>\n",
              "      <td>0.030376</td>\n",
              "      <td>0.161390</td>\n",
              "      <td>-0.727035</td>\n",
              "      <td>-1.862596</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>103.000000</td>\n",
              "      <td>0.132796</td>\n",
              "      <td>0.137931</td>\n",
              "      <td>0.413697</td>\n",
              "      <td>0.290191</td>\n",
              "      <td>0.002304</td>\n",
              "      <td>0.226925</td>\n",
              "      <td>0.144121</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.360875</td>\n",
              "      <td>0.405771</td>\n",
              "      <td>0.049537</td>\n",
              "      <td>0.234057</td>\n",
              "      <td>0.056790</td>\n",
              "      <td>0.119152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>226.000000</td>\n",
              "      <td>0.187500</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.479737</td>\n",
              "      <td>0.375887</td>\n",
              "      <td>0.058752</td>\n",
              "      <td>0.308180</td>\n",
              "      <td>0.204779</td>\n",
              "      <td>10.062500</td>\n",
              "      <td>0.391704</td>\n",
              "      <td>0.435684</td>\n",
              "      <td>0.078264</td>\n",
              "      <td>0.310657</td>\n",
              "      <td>2.041941</td>\n",
              "      <td>2.414201</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>24.000000</td>\n",
              "      <td>3108.000000</td>\n",
              "      <td>0.514286</td>\n",
              "      <td>0.760000</td>\n",
              "      <td>0.836311</td>\n",
              "      <td>0.836311</td>\n",
              "      <td>0.463884</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.192246</td>\n",
              "      <td>14.499987</td>\n",
              "      <td>0.534156</td>\n",
              "      <td>0.671600</td>\n",
              "      <td>0.349907</td>\n",
              "      <td>0.818542</td>\n",
              "      <td>839.796075</td>\n",
              "      <td>10.371906</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ae3d88e-6e90-451a-a6a2-78d205a1a8ed')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ae3d88e-6e90-451a-a6a2-78d205a1a8ed button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ae3d88e-6e90-451a-a6a2-78d205a1a8ed');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fff5d059-5ed0-4ff8-9aae-1951e8120b72\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fff5d059-5ed0-4ff8-9aae-1951e8120b72')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fff5d059-5ed0-4ff8-9aae-1951e8120b72 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data_matrix_idr_features\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"IDR Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 645.9684402838183,\n        \"min\": 1.0,\n        \"max\": 1832.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1832.0,\n          2.2936681222707422,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total IDR Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1132.8601290552917,\n        \"min\": 25.0,\n        \"max\": 3108.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          190.2221615720524,\n          103.0,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Positive\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.651995371056,\n        \"min\": 0.0,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.1433367760276717,\n          0.13279629149377592,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Negative\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.6370776409373,\n        \"min\": 0.0,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.15536150320556133,\n          0.1379310344827586,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Expanding\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.5756964798692,\n        \"min\": 0.0525211262111143,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4165448572432785,\n          0.41369697879459544,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.6014218366668,\n        \"min\": 0.0,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.30181340942885043,\n          0.2901909426288158,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCPR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.718811212917,\n        \"min\": -0.7594319210814742,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.009218344994212684,\n          0.0023037937540485503,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kappa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.654420155479,\n        \"min\": -1.0,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.24872758721447105,\n          0.2269247910410228,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Omega\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.6119416655268,\n        \"min\": 0.0054224325437596,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.17012594328287023,\n          0.1441210892927584,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Isoelectric Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 645.2751893353983,\n        \"min\": 1.75,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.562397601823099,\n          7.0,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Uversky Hydropathy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.6004809106422,\n        \"min\": 0.05324124783297753,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.35589358287979816,\n          0.3608749999999996,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PPII Propensity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.5818754554193,\n        \"min\": 0.050110884039986335,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4082302818402609,\n          0.4057707739415055,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.6790104118535,\n        \"min\": 0.0,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.059863374031737526,\n          0.049536830594544404,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta Max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.6146125686582,\n        \"min\": 0.0,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.2426690590922631,\n          0.2340574276612598,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 675.0497998027224,\n        \"min\": -55.42732875634679,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.667438445796123,\n          0.056789728232984005,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Partition Ratios\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 647.3521674153001,\n        \"min\": -6.835414998,\n        \"max\": 1832.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.2523710468133189,\n          0.11915224599999999,\n          1832.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert IDR counts to log2 IDR counts\n",
        "data_matrix_idr_features['log2 IDR Count'] = np.log2(data_matrix_idr_features['IDR Count'])\n",
        "\n",
        "# Convert total length of IDR to log10 length of IDR\n",
        "data_matrix_idr_features['log10 Total IDR Length'] = np.log10(data_matrix_idr_features['Total IDR Length'])\n",
        "\n",
        "# Drop the sequences that have absurdly high SCD\n",
        "data_matrix_idr_features = data_matrix_idr_features[(data_matrix_idr_features['SCD']>-25.0)*(data_matrix_idr_features['SCD']<25.0)]\n",
        "\n",
        "# Select only the protein sequences that have a partition ratio of > 2 or < -2 for classification\n",
        "def assign_labels(pr):\n",
        "  if pr > 2.0:\n",
        "    return 1\n",
        "  elif pr < -2.0:\n",
        "    return 0\n",
        "  else:\n",
        "    return -1\n",
        "\n",
        "data_matrix_idr_features['Enrichment Label'] = data_matrix_idr_features['Log Partition Ratios'].apply(assign_labels)\n",
        "\n",
        "# Drop the columns that contain Enrichment Label of -1\n",
        "data_matrix_idr_features = data_matrix_idr_features[data_matrix_idr_features['Enrichment Label'] != -1]\n",
        "\n",
        "data_matrix_idr_features.head(10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 569
        },
        "id": "RX3RJxmrd_wD",
        "outputId": "8dbf2a04-7b0f-4e87-bc74-aa6ef4884c15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-b90914341a67>:19: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  data_matrix_idr_features['Enrichment Label'] = data_matrix_idr_features['Log Partition Ratios'].apply(assign_labels)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Uniprot ID                                  IDR Sequence List  \\\n",
              "0      Q8WUM0         ['FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL']   \n",
              "1      Q9NVP1  ['NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQ...   \n",
              "2      Q8N7H5  ['DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQ...   \n",
              "3      Q8WUA4  ['SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRR...   \n",
              "5      P55884  ['QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEA...   \n",
              "6      Q9Y5Q8  ['LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSEN...   \n",
              "7      P55081  ['SVPSALMKQPPIQSTAGAVPVRNEKG', 'VSGKRPDYAPMESS...   \n",
              "8      Q9UBU9  ['ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGS...   \n",
              "9      Q8IX01  ['SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSI', 'RATTGTQT...   \n",
              "10     O75643                 ['RMGDKAQRTKPQMQEERRAKRRKRDEDRHD']   \n",
              "\n",
              "                                IDR Sequence Combined  IDR Count  \\\n",
              "0              FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL        1.0   \n",
              "1   NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQEA...        1.0   \n",
              "2   DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQAQ...        1.0   \n",
              "3   SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRRLP...        2.0   \n",
              "5   QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAAG...        1.0   \n",
              "6   LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSENEM...        1.0   \n",
              "7   SVPSALMKQPPIQSTAGAVPVRNEKGVSGKRPDYAPMESSDEEDEE...        2.0   \n",
              "8   ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGSGI...        1.0   \n",
              "9   SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSIRATTGTQTLLSSGT...        3.0   \n",
              "10                     RMGDKAQRTKPQMQEERRAKRRKRDEDRHD        1.0   \n",
              "\n",
              "    Total IDR Length  Fraction Positive  Fraction Negative  \\\n",
              "0               38.0           0.157895           0.000000   \n",
              "1              138.0           0.181159           0.181159   \n",
              "2              102.0           0.078431           0.313725   \n",
              "3              255.0           0.164706           0.149020   \n",
              "5              157.0           0.050955           0.248408   \n",
              "6               54.0           0.055556           0.444444   \n",
              "7              178.0           0.146067           0.331461   \n",
              "8               84.0           0.226190           0.178571   \n",
              "9              198.0           0.070707           0.202020   \n",
              "10              30.0           0.400000           0.233333   \n",
              "\n",
              "    Fraction Expanding       FCR      NCPR  ...  Isoelectric Point  \\\n",
              "0             0.368379  0.157852  0.157852  ...          14.499987   \n",
              "1             0.405402  0.361924 -0.000133  ...           7.000000   \n",
              "2             0.414803  0.395195 -0.231872  ...           3.609375   \n",
              "3             0.479416  0.314710  0.015757  ...           8.750000   \n",
              "5             0.446737  0.300240 -0.196211  ...           3.500000   \n",
              "6             0.518157  0.499638 -0.388703  ...           3.281250   \n",
              "7             0.528732  0.478170 -0.184310  ...           3.937500   \n",
              "8             0.466120  0.406597  0.049555  ...          10.062500   \n",
              "9             0.417808  0.276394 -0.128340  ...           3.937500   \n",
              "10            0.671853  0.638519  0.172145  ...          11.812500   \n",
              "\n",
              "    Uversky Hydropathy  PPII Propensity     Delta  Delta Max        SCD  \\\n",
              "0             0.433333         0.426842  0.023065   0.095141   1.334377   \n",
              "1             0.340419         0.391667  0.139929   0.347977  -3.062043   \n",
              "2             0.314270         0.315980  0.070581   0.278184  14.806040   \n",
              "3             0.371373         0.448118  0.097659   0.304710  -3.284487   \n",
              "5             0.389314         0.435223  0.024696   0.221737  21.077413   \n",
              "6             0.328189         0.349630  0.149423   0.247181  11.883401   \n",
              "7             0.327778         0.392191  0.138866   0.404138  17.644652   \n",
              "8             0.298942         0.354048  0.123157   0.378316  -1.146155   \n",
              "9             0.390685         0.405758  0.066557   0.229458   4.407218   \n",
              "10            0.184815         0.414667  0.122409   0.539486   0.211554   \n",
              "\n",
              "    Log Partition Ratios  log2 IDR Count  log10 Total IDR Length  \\\n",
              "0              10.371906        0.000000                1.579784   \n",
              "1               9.565771        0.000000                2.139879   \n",
              "2               9.189393        0.000000                2.008600   \n",
              "3               9.121233        1.000000                2.406540   \n",
              "5               8.627768        0.000000                2.195900   \n",
              "6               7.997080        0.000000                1.732394   \n",
              "7               7.713330        1.000000                2.250420   \n",
              "8               7.690745        0.000000                1.924279   \n",
              "9               7.650883        1.584963                2.296665   \n",
              "10              7.646523        0.000000                1.477121   \n",
              "\n",
              "    Enrichment Label  \n",
              "0                  1  \n",
              "1                  1  \n",
              "2                  1  \n",
              "3                  1  \n",
              "5                  1  \n",
              "6                  1  \n",
              "7                  1  \n",
              "8                  1  \n",
              "9                  1  \n",
              "10                 1  \n",
              "\n",
              "[10 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4ec7d54-a45a-47a0-a989-55e903e2c16c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Uniprot ID</th>\n",
              "      <th>IDR Sequence List</th>\n",
              "      <th>IDR Sequence Combined</th>\n",
              "      <th>IDR Count</th>\n",
              "      <th>Total IDR Length</th>\n",
              "      <th>Fraction Positive</th>\n",
              "      <th>Fraction Negative</th>\n",
              "      <th>Fraction Expanding</th>\n",
              "      <th>FCR</th>\n",
              "      <th>NCPR</th>\n",
              "      <th>...</th>\n",
              "      <th>Isoelectric Point</th>\n",
              "      <th>Uversky Hydropathy</th>\n",
              "      <th>PPII Propensity</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Delta Max</th>\n",
              "      <th>SCD</th>\n",
              "      <th>Log Partition Ratios</th>\n",
              "      <th>log2 IDR Count</th>\n",
              "      <th>log10 Total IDR Length</th>\n",
              "      <th>Enrichment Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Q8WUM0</td>\n",
              "      <td>['FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL']</td>\n",
              "      <td>FPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPL</td>\n",
              "      <td>1.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>0.157895</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.368379</td>\n",
              "      <td>0.157852</td>\n",
              "      <td>0.157852</td>\n",
              "      <td>...</td>\n",
              "      <td>14.499987</td>\n",
              "      <td>0.433333</td>\n",
              "      <td>0.426842</td>\n",
              "      <td>0.023065</td>\n",
              "      <td>0.095141</td>\n",
              "      <td>1.334377</td>\n",
              "      <td>10.371906</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.579784</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Q9NVP1</td>\n",
              "      <td>['NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQ...</td>\n",
              "      <td>NLTLSETQNGDVSEETMGSRKVKKSKQKPMNVGLSETQNGGMSQEA...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>0.181159</td>\n",
              "      <td>0.181159</td>\n",
              "      <td>0.405402</td>\n",
              "      <td>0.361924</td>\n",
              "      <td>-0.000133</td>\n",
              "      <td>...</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.340419</td>\n",
              "      <td>0.391667</td>\n",
              "      <td>0.139929</td>\n",
              "      <td>0.347977</td>\n",
              "      <td>-3.062043</td>\n",
              "      <td>9.565771</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.139879</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Q8N7H5</td>\n",
              "      <td>['DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQ...</td>\n",
              "      <td>DKSGSGEDESSEDEARAARDKEEIFGSDADSEDDADSDDEDRGQAQ...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>0.078431</td>\n",
              "      <td>0.313725</td>\n",
              "      <td>0.414803</td>\n",
              "      <td>0.395195</td>\n",
              "      <td>-0.231872</td>\n",
              "      <td>...</td>\n",
              "      <td>3.609375</td>\n",
              "      <td>0.314270</td>\n",
              "      <td>0.315980</td>\n",
              "      <td>0.070581</td>\n",
              "      <td>0.278184</td>\n",
              "      <td>14.806040</td>\n",
              "      <td>9.189393</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.008600</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Q8WUA4</td>\n",
              "      <td>['SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRR...</td>\n",
              "      <td>SPGQEVLNQLDVKTSSEMTSAEASVEMSLPTPLPGFEDSPDQRRLP...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>255.0</td>\n",
              "      <td>0.164706</td>\n",
              "      <td>0.149020</td>\n",
              "      <td>0.479416</td>\n",
              "      <td>0.314710</td>\n",
              "      <td>0.015757</td>\n",
              "      <td>...</td>\n",
              "      <td>8.750000</td>\n",
              "      <td>0.371373</td>\n",
              "      <td>0.448118</td>\n",
              "      <td>0.097659</td>\n",
              "      <td>0.304710</td>\n",
              "      <td>-3.284487</td>\n",
              "      <td>9.121233</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.406540</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>P55884</td>\n",
              "      <td>['QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEA...</td>\n",
              "      <td>QDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAAG...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>157.0</td>\n",
              "      <td>0.050955</td>\n",
              "      <td>0.248408</td>\n",
              "      <td>0.446737</td>\n",
              "      <td>0.300240</td>\n",
              "      <td>-0.196211</td>\n",
              "      <td>...</td>\n",
              "      <td>3.500000</td>\n",
              "      <td>0.389314</td>\n",
              "      <td>0.435223</td>\n",
              "      <td>0.024696</td>\n",
              "      <td>0.221737</td>\n",
              "      <td>21.077413</td>\n",
              "      <td>8.627768</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.195900</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Q9Y5Q8</td>\n",
              "      <td>['LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSEN...</td>\n",
              "      <td>LFSSSAKADGGKEQLTYESGEDEEDEEEEEEEEEDFKPSDGSENEM...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.055556</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.518157</td>\n",
              "      <td>0.499638</td>\n",
              "      <td>-0.388703</td>\n",
              "      <td>...</td>\n",
              "      <td>3.281250</td>\n",
              "      <td>0.328189</td>\n",
              "      <td>0.349630</td>\n",
              "      <td>0.149423</td>\n",
              "      <td>0.247181</td>\n",
              "      <td>11.883401</td>\n",
              "      <td>7.997080</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.732394</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P55081</td>\n",
              "      <td>['SVPSALMKQPPIQSTAGAVPVRNEKG', 'VSGKRPDYAPMESS...</td>\n",
              "      <td>SVPSALMKQPPIQSTAGAVPVRNEKGVSGKRPDYAPMESSDEEDEE...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>0.146067</td>\n",
              "      <td>0.331461</td>\n",
              "      <td>0.528732</td>\n",
              "      <td>0.478170</td>\n",
              "      <td>-0.184310</td>\n",
              "      <td>...</td>\n",
              "      <td>3.937500</td>\n",
              "      <td>0.327778</td>\n",
              "      <td>0.392191</td>\n",
              "      <td>0.138866</td>\n",
              "      <td>0.404138</td>\n",
              "      <td>17.644652</td>\n",
              "      <td>7.713330</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.250420</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Q9UBU9</td>\n",
              "      <td>['ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGS...</td>\n",
              "      <td>ADEGKSYSEHDDERVNFPQRKKKGRGPFRWKYGEGNRRSGRGGSGI...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>0.226190</td>\n",
              "      <td>0.178571</td>\n",
              "      <td>0.466120</td>\n",
              "      <td>0.406597</td>\n",
              "      <td>0.049555</td>\n",
              "      <td>...</td>\n",
              "      <td>10.062500</td>\n",
              "      <td>0.298942</td>\n",
              "      <td>0.354048</td>\n",
              "      <td>0.123157</td>\n",
              "      <td>0.378316</td>\n",
              "      <td>-1.146155</td>\n",
              "      <td>7.690745</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.924279</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Q8IX01</td>\n",
              "      <td>['SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSI', 'RATTGTQT...</td>\n",
              "      <td>SGSVAHSRDAGREGLRSDVFPGPSFRSSNPSIRATTGTQTLLSSGT...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>198.0</td>\n",
              "      <td>0.070707</td>\n",
              "      <td>0.202020</td>\n",
              "      <td>0.417808</td>\n",
              "      <td>0.276394</td>\n",
              "      <td>-0.128340</td>\n",
              "      <td>...</td>\n",
              "      <td>3.937500</td>\n",
              "      <td>0.390685</td>\n",
              "      <td>0.405758</td>\n",
              "      <td>0.066557</td>\n",
              "      <td>0.229458</td>\n",
              "      <td>4.407218</td>\n",
              "      <td>7.650883</td>\n",
              "      <td>1.584963</td>\n",
              "      <td>2.296665</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>O75643</td>\n",
              "      <td>['RMGDKAQRTKPQMQEERRAKRRKRDEDRHD']</td>\n",
              "      <td>RMGDKAQRTKPQMQEERRAKRRKRDEDRHD</td>\n",
              "      <td>1.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>0.233333</td>\n",
              "      <td>0.671853</td>\n",
              "      <td>0.638519</td>\n",
              "      <td>0.172145</td>\n",
              "      <td>...</td>\n",
              "      <td>11.812500</td>\n",
              "      <td>0.184815</td>\n",
              "      <td>0.414667</td>\n",
              "      <td>0.122409</td>\n",
              "      <td>0.539486</td>\n",
              "      <td>0.211554</td>\n",
              "      <td>7.646523</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.477121</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4ec7d54-a45a-47a0-a989-55e903e2c16c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4ec7d54-a45a-47a0-a989-55e903e2c16c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4ec7d54-a45a-47a0-a989-55e903e2c16c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5086c7ac-d6c0-4adb-93f0-d08ae19d5a45\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5086c7ac-d6c0-4adb-93f0-d08ae19d5a45')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5086c7ac-d6c0-4adb-93f0-d08ae19d5a45 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data_matrix_idr_features"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_matrix_idr_features.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "GZFAM7zWhvpM",
        "outputId": "b8b2cd99-5a8f-4069-d14b-1b849b98477f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        IDR Count  Total IDR Length  Fraction Positive  Fraction Negative  \\\n",
              "count  910.000000        910.000000         910.000000         910.000000   \n",
              "mean     2.187912        171.602198           0.143988           0.155992   \n",
              "std      1.827208        221.565527           0.082870           0.098521   \n",
              "min      1.000000         25.000000           0.000000           0.000000   \n",
              "25%      1.000000         47.000000           0.085382           0.091243   \n",
              "50%      2.000000         96.500000           0.133333           0.140518   \n",
              "75%      3.000000        205.000000           0.188568           0.202461   \n",
              "max     16.000000       2263.000000           0.514286           0.760000   \n",
              "\n",
              "       Fraction Expanding         FCR        NCPR       Kappa       Omega  \\\n",
              "count          910.000000  910.000000  910.000000  910.000000  910.000000   \n",
              "mean             0.417364    0.302977   -0.009276    0.244847    0.173121   \n",
              "std              0.105478    0.128661    0.128428    0.157175    0.121607   \n",
              "min              0.093750    0.000000   -0.759432   -1.000000    0.006680   \n",
              "25%              0.354140    0.215698   -0.063214    0.166276    0.103216   \n",
              "50%              0.414331    0.291191    0.000000    0.227097    0.146009   \n",
              "75%              0.479334    0.374882    0.059136    0.305297    0.206152   \n",
              "max              0.836311    0.836311    0.463884    1.000000    0.918346   \n",
              "\n",
              "       Isoelectric Point  Uversky Hydropathy  PPII Propensity       Delta  \\\n",
              "count         910.000000          910.000000       910.000000  910.000000   \n",
              "mean            7.450670            0.354973         0.407909    0.060274   \n",
              "std             3.154125            0.052725         0.049019    0.044796   \n",
              "min             1.750000            0.143928         0.183107    0.000000   \n",
              "25%             4.375000            0.325059         0.379406    0.029113   \n",
              "50%             7.000000            0.358428         0.405843    0.049394   \n",
              "75%            10.062500            0.389969         0.435891    0.075584   \n",
              "max            14.499987            0.533333         0.610800    0.349907   \n",
              "\n",
              "        Delta Max         SCD  Log Partition Ratios  log2 IDR Count  \\\n",
              "count  910.000000  910.000000            910.000000      910.000000   \n",
              "mean     0.244460    1.122316              0.415538        0.797172   \n",
              "std      0.120334    5.011959              3.968001        0.909945   \n",
              "min      0.000000  -23.759160             -6.835415        0.000000   \n",
              "25%      0.159912   -0.780215             -3.320583        0.000000   \n",
              "50%      0.235649    0.056107              2.251694        1.000000   \n",
              "75%      0.313957    1.828678              3.635604        1.584963   \n",
              "max      0.818542   24.966790             10.371906        4.000000   \n",
              "\n",
              "       log10 Total IDR Length  Enrichment Label  \n",
              "count              910.000000        910.000000  \n",
              "mean                 2.018353          0.537363  \n",
              "std                  0.414190          0.498876  \n",
              "min                  1.397940          0.000000  \n",
              "25%                  1.672098          0.000000  \n",
              "50%                  1.984521          1.000000  \n",
              "75%                  2.311754          1.000000  \n",
              "max                  3.354685          1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7fa697f-0004-4891-8871-b21a7951ca4f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>IDR Count</th>\n",
              "      <th>Total IDR Length</th>\n",
              "      <th>Fraction Positive</th>\n",
              "      <th>Fraction Negative</th>\n",
              "      <th>Fraction Expanding</th>\n",
              "      <th>FCR</th>\n",
              "      <th>NCPR</th>\n",
              "      <th>Kappa</th>\n",
              "      <th>Omega</th>\n",
              "      <th>Isoelectric Point</th>\n",
              "      <th>Uversky Hydropathy</th>\n",
              "      <th>PPII Propensity</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Delta Max</th>\n",
              "      <th>SCD</th>\n",
              "      <th>Log Partition Ratios</th>\n",
              "      <th>log2 IDR Count</th>\n",
              "      <th>log10 Total IDR Length</th>\n",
              "      <th>Enrichment Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.187912</td>\n",
              "      <td>171.602198</td>\n",
              "      <td>0.143988</td>\n",
              "      <td>0.155992</td>\n",
              "      <td>0.417364</td>\n",
              "      <td>0.302977</td>\n",
              "      <td>-0.009276</td>\n",
              "      <td>0.244847</td>\n",
              "      <td>0.173121</td>\n",
              "      <td>7.450670</td>\n",
              "      <td>0.354973</td>\n",
              "      <td>0.407909</td>\n",
              "      <td>0.060274</td>\n",
              "      <td>0.244460</td>\n",
              "      <td>1.122316</td>\n",
              "      <td>0.415538</td>\n",
              "      <td>0.797172</td>\n",
              "      <td>2.018353</td>\n",
              "      <td>0.537363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.827208</td>\n",
              "      <td>221.565527</td>\n",
              "      <td>0.082870</td>\n",
              "      <td>0.098521</td>\n",
              "      <td>0.105478</td>\n",
              "      <td>0.128661</td>\n",
              "      <td>0.128428</td>\n",
              "      <td>0.157175</td>\n",
              "      <td>0.121607</td>\n",
              "      <td>3.154125</td>\n",
              "      <td>0.052725</td>\n",
              "      <td>0.049019</td>\n",
              "      <td>0.044796</td>\n",
              "      <td>0.120334</td>\n",
              "      <td>5.011959</td>\n",
              "      <td>3.968001</td>\n",
              "      <td>0.909945</td>\n",
              "      <td>0.414190</td>\n",
              "      <td>0.498876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.093750</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.759432</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.006680</td>\n",
              "      <td>1.750000</td>\n",
              "      <td>0.143928</td>\n",
              "      <td>0.183107</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-23.759160</td>\n",
              "      <td>-6.835415</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.397940</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>0.085382</td>\n",
              "      <td>0.091243</td>\n",
              "      <td>0.354140</td>\n",
              "      <td>0.215698</td>\n",
              "      <td>-0.063214</td>\n",
              "      <td>0.166276</td>\n",
              "      <td>0.103216</td>\n",
              "      <td>4.375000</td>\n",
              "      <td>0.325059</td>\n",
              "      <td>0.379406</td>\n",
              "      <td>0.029113</td>\n",
              "      <td>0.159912</td>\n",
              "      <td>-0.780215</td>\n",
              "      <td>-3.320583</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.672098</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>96.500000</td>\n",
              "      <td>0.133333</td>\n",
              "      <td>0.140518</td>\n",
              "      <td>0.414331</td>\n",
              "      <td>0.291191</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.227097</td>\n",
              "      <td>0.146009</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.358428</td>\n",
              "      <td>0.405843</td>\n",
              "      <td>0.049394</td>\n",
              "      <td>0.235649</td>\n",
              "      <td>0.056107</td>\n",
              "      <td>2.251694</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.984521</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>205.000000</td>\n",
              "      <td>0.188568</td>\n",
              "      <td>0.202461</td>\n",
              "      <td>0.479334</td>\n",
              "      <td>0.374882</td>\n",
              "      <td>0.059136</td>\n",
              "      <td>0.305297</td>\n",
              "      <td>0.206152</td>\n",
              "      <td>10.062500</td>\n",
              "      <td>0.389969</td>\n",
              "      <td>0.435891</td>\n",
              "      <td>0.075584</td>\n",
              "      <td>0.313957</td>\n",
              "      <td>1.828678</td>\n",
              "      <td>3.635604</td>\n",
              "      <td>1.584963</td>\n",
              "      <td>2.311754</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>16.000000</td>\n",
              "      <td>2263.000000</td>\n",
              "      <td>0.514286</td>\n",
              "      <td>0.760000</td>\n",
              "      <td>0.836311</td>\n",
              "      <td>0.836311</td>\n",
              "      <td>0.463884</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.918346</td>\n",
              "      <td>14.499987</td>\n",
              "      <td>0.533333</td>\n",
              "      <td>0.610800</td>\n",
              "      <td>0.349907</td>\n",
              "      <td>0.818542</td>\n",
              "      <td>24.966790</td>\n",
              "      <td>10.371906</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.354685</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7fa697f-0004-4891-8871-b21a7951ca4f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a7fa697f-0004-4891-8871-b21a7951ca4f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a7fa697f-0004-4891-8871-b21a7951ca4f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3d38015c-aae4-404f-b6cd-afc7c7489169\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3d38015c-aae4-404f-b6cd-afc7c7489169')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3d38015c-aae4-404f-b6cd-afc7c7489169 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data_matrix_idr_features\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"IDR Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.40810111748414,\n        \"min\": 1.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          910.0,\n          2.187912087912088,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total IDR Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 769.2163103122411,\n        \"min\": 25.0,\n        \"max\": 2263.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          171.6021978021978,\n          96.5,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Positive\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6756176178734,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.14398775060260016,\n          0.1333333333333333,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Negative\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.66049784703944,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.15599155355273955,\n          0.14051820415456773,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Expanding\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.5972631899096,\n        \"min\": 0.09375,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4173640108087942,\n          0.4143310092655082,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.62510138095985,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.30297698096512576,\n          0.29119064071330614,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCPR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.74288095199296,\n        \"min\": -0.7594319210814742,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.009276466871233947,\n          0.0,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kappa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.67845490387776,\n        \"min\": -1.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.24484707727582025,\n          0.2270966244955708,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Omega\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.649103363578,\n        \"min\": 0.0066795980517905,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.1731210423603806,\n          0.1460087768627919,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Isoelectric Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 319.320183169594,\n        \"min\": 1.75,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.4506696281852305,\n          7.0,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Uversky Hydropathy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.62460334935963,\n        \"min\": 0.05272485381165818,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.354973040708432,\n          0.3584283370039285,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PPII Propensity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6087764992302,\n        \"min\": 0.049019246347044694,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4079093270268746,\n          0.4058428539426524,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.702841543771,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.06027419287883061,\n          0.0493938185056758,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta Max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6380733730111,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.24445988568220556,\n          0.23564902157685608,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.5754038974344,\n        \"min\": -23.75916029986348,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.1223155538709275,\n          0.056107158037200996,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Partition Ratios\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.24479984712025,\n        \"min\": -6.835414998,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.41553847552967016,\n          2.25169424,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log2 IDR Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.31725147125366,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          910.0,\n          0.7971721681301135,\n          1.584962500721156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log10 Total IDR Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.0703025896446,\n        \"min\": 0.4141897249461949,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.0183531736281872,\n          1.9845214836529066,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Enrichment Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.52999346503816,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5373626373626373,\n          1.0,\n          0.4988762623287952\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Derive a dataset from above for training a neural network\n",
        "columns = ['Uniprot ID', 'log2 IDR Count', 'log10 Total IDR Length', 'Fraction Positive',\n",
        "           'Fraction Negative', 'Fraction Expanding', 'FCR', 'NCPR', 'Kappa',\n",
        "           'Omega', 'Isoelectric Point', 'Uversky Hydropathy', 'PPII Propensity',\n",
        "           'Delta', 'Delta Max', 'SCD', 'Enrichment Label']\n",
        "\n",
        "data_matrix_nn = data_matrix_idr_features[columns]\n",
        "\n",
        "data_matrix_nn.head(10)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "LEtV7L7LbY3m",
        "outputId": "db440ad8-c2a6-4215-cad7-38c163b08c80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Uniprot ID  log2 IDR Count  log10 Total IDR Length  Fraction Positive  \\\n",
              "0      Q8WUM0        0.000000                1.579784           0.157895   \n",
              "1      Q9NVP1        0.000000                2.139879           0.181159   \n",
              "2      Q8N7H5        0.000000                2.008600           0.078431   \n",
              "3      Q8WUA4        1.000000                2.406540           0.164706   \n",
              "5      P55884        0.000000                2.195900           0.050955   \n",
              "6      Q9Y5Q8        0.000000                1.732394           0.055556   \n",
              "7      P55081        1.000000                2.250420           0.146067   \n",
              "8      Q9UBU9        0.000000                1.924279           0.226190   \n",
              "9      Q8IX01        1.584963                2.296665           0.070707   \n",
              "10     O75643        0.000000                1.477121           0.400000   \n",
              "\n",
              "    Fraction Negative  Fraction Expanding       FCR      NCPR     Kappa  \\\n",
              "0            0.000000            0.368379  0.157852  0.157852  0.242429   \n",
              "1            0.181159            0.405402  0.361924 -0.000133  0.402122   \n",
              "2            0.313725            0.414803  0.395195 -0.231872  0.253720   \n",
              "3            0.149020            0.479416  0.314710  0.015757  0.320499   \n",
              "5            0.248408            0.446737  0.300240 -0.196211  0.111375   \n",
              "6            0.444444            0.518157  0.499638 -0.388703  0.604509   \n",
              "7            0.331461            0.528732  0.478170 -0.184310  0.343609   \n",
              "8            0.178571            0.466120  0.406597  0.049555  0.325540   \n",
              "9            0.202020            0.417808  0.276394 -0.128340  0.290060   \n",
              "10           0.233333            0.671853  0.638519  0.172145  0.226899   \n",
              "\n",
              "       Omega  Isoelectric Point  Uversky Hydropathy  PPII Propensity  \\\n",
              "0   0.053462          14.499987            0.433333         0.426842   \n",
              "1   0.181223           7.000000            0.340419         0.391667   \n",
              "2   0.121241           3.609375            0.314270         0.315980   \n",
              "3   0.070002           8.750000            0.371373         0.448118   \n",
              "5   0.037347           3.500000            0.389314         0.435223   \n",
              "6   0.300250           3.281250            0.328189         0.349630   \n",
              "7   0.075862           3.937500            0.327778         0.392191   \n",
              "8   0.053614          10.062500            0.298942         0.354048   \n",
              "9   0.155521           3.937500            0.390685         0.405758   \n",
              "10  0.255478          11.812500            0.184815         0.414667   \n",
              "\n",
              "       Delta  Delta Max        SCD  Enrichment Label  \n",
              "0   0.023065   0.095141   1.334377                 1  \n",
              "1   0.139929   0.347977  -3.062043                 1  \n",
              "2   0.070581   0.278184  14.806040                 1  \n",
              "3   0.097659   0.304710  -3.284487                 1  \n",
              "5   0.024696   0.221737  21.077413                 1  \n",
              "6   0.149423   0.247181  11.883401                 1  \n",
              "7   0.138866   0.404138  17.644652                 1  \n",
              "8   0.123157   0.378316  -1.146155                 1  \n",
              "9   0.066557   0.229458   4.407218                 1  \n",
              "10  0.122409   0.539486   0.211554                 1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-926af34b-73b6-424c-b7ee-9f8d776b9457\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Uniprot ID</th>\n",
              "      <th>log2 IDR Count</th>\n",
              "      <th>log10 Total IDR Length</th>\n",
              "      <th>Fraction Positive</th>\n",
              "      <th>Fraction Negative</th>\n",
              "      <th>Fraction Expanding</th>\n",
              "      <th>FCR</th>\n",
              "      <th>NCPR</th>\n",
              "      <th>Kappa</th>\n",
              "      <th>Omega</th>\n",
              "      <th>Isoelectric Point</th>\n",
              "      <th>Uversky Hydropathy</th>\n",
              "      <th>PPII Propensity</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Delta Max</th>\n",
              "      <th>SCD</th>\n",
              "      <th>Enrichment Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Q8WUM0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.579784</td>\n",
              "      <td>0.157895</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.368379</td>\n",
              "      <td>0.157852</td>\n",
              "      <td>0.157852</td>\n",
              "      <td>0.242429</td>\n",
              "      <td>0.053462</td>\n",
              "      <td>14.499987</td>\n",
              "      <td>0.433333</td>\n",
              "      <td>0.426842</td>\n",
              "      <td>0.023065</td>\n",
              "      <td>0.095141</td>\n",
              "      <td>1.334377</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Q9NVP1</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.139879</td>\n",
              "      <td>0.181159</td>\n",
              "      <td>0.181159</td>\n",
              "      <td>0.405402</td>\n",
              "      <td>0.361924</td>\n",
              "      <td>-0.000133</td>\n",
              "      <td>0.402122</td>\n",
              "      <td>0.181223</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.340419</td>\n",
              "      <td>0.391667</td>\n",
              "      <td>0.139929</td>\n",
              "      <td>0.347977</td>\n",
              "      <td>-3.062043</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Q8N7H5</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.008600</td>\n",
              "      <td>0.078431</td>\n",
              "      <td>0.313725</td>\n",
              "      <td>0.414803</td>\n",
              "      <td>0.395195</td>\n",
              "      <td>-0.231872</td>\n",
              "      <td>0.253720</td>\n",
              "      <td>0.121241</td>\n",
              "      <td>3.609375</td>\n",
              "      <td>0.314270</td>\n",
              "      <td>0.315980</td>\n",
              "      <td>0.070581</td>\n",
              "      <td>0.278184</td>\n",
              "      <td>14.806040</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Q8WUA4</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.406540</td>\n",
              "      <td>0.164706</td>\n",
              "      <td>0.149020</td>\n",
              "      <td>0.479416</td>\n",
              "      <td>0.314710</td>\n",
              "      <td>0.015757</td>\n",
              "      <td>0.320499</td>\n",
              "      <td>0.070002</td>\n",
              "      <td>8.750000</td>\n",
              "      <td>0.371373</td>\n",
              "      <td>0.448118</td>\n",
              "      <td>0.097659</td>\n",
              "      <td>0.304710</td>\n",
              "      <td>-3.284487</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>P55884</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.195900</td>\n",
              "      <td>0.050955</td>\n",
              "      <td>0.248408</td>\n",
              "      <td>0.446737</td>\n",
              "      <td>0.300240</td>\n",
              "      <td>-0.196211</td>\n",
              "      <td>0.111375</td>\n",
              "      <td>0.037347</td>\n",
              "      <td>3.500000</td>\n",
              "      <td>0.389314</td>\n",
              "      <td>0.435223</td>\n",
              "      <td>0.024696</td>\n",
              "      <td>0.221737</td>\n",
              "      <td>21.077413</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Q9Y5Q8</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.732394</td>\n",
              "      <td>0.055556</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.518157</td>\n",
              "      <td>0.499638</td>\n",
              "      <td>-0.388703</td>\n",
              "      <td>0.604509</td>\n",
              "      <td>0.300250</td>\n",
              "      <td>3.281250</td>\n",
              "      <td>0.328189</td>\n",
              "      <td>0.349630</td>\n",
              "      <td>0.149423</td>\n",
              "      <td>0.247181</td>\n",
              "      <td>11.883401</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P55081</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.250420</td>\n",
              "      <td>0.146067</td>\n",
              "      <td>0.331461</td>\n",
              "      <td>0.528732</td>\n",
              "      <td>0.478170</td>\n",
              "      <td>-0.184310</td>\n",
              "      <td>0.343609</td>\n",
              "      <td>0.075862</td>\n",
              "      <td>3.937500</td>\n",
              "      <td>0.327778</td>\n",
              "      <td>0.392191</td>\n",
              "      <td>0.138866</td>\n",
              "      <td>0.404138</td>\n",
              "      <td>17.644652</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Q9UBU9</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.924279</td>\n",
              "      <td>0.226190</td>\n",
              "      <td>0.178571</td>\n",
              "      <td>0.466120</td>\n",
              "      <td>0.406597</td>\n",
              "      <td>0.049555</td>\n",
              "      <td>0.325540</td>\n",
              "      <td>0.053614</td>\n",
              "      <td>10.062500</td>\n",
              "      <td>0.298942</td>\n",
              "      <td>0.354048</td>\n",
              "      <td>0.123157</td>\n",
              "      <td>0.378316</td>\n",
              "      <td>-1.146155</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Q8IX01</td>\n",
              "      <td>1.584963</td>\n",
              "      <td>2.296665</td>\n",
              "      <td>0.070707</td>\n",
              "      <td>0.202020</td>\n",
              "      <td>0.417808</td>\n",
              "      <td>0.276394</td>\n",
              "      <td>-0.128340</td>\n",
              "      <td>0.290060</td>\n",
              "      <td>0.155521</td>\n",
              "      <td>3.937500</td>\n",
              "      <td>0.390685</td>\n",
              "      <td>0.405758</td>\n",
              "      <td>0.066557</td>\n",
              "      <td>0.229458</td>\n",
              "      <td>4.407218</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>O75643</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.477121</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>0.233333</td>\n",
              "      <td>0.671853</td>\n",
              "      <td>0.638519</td>\n",
              "      <td>0.172145</td>\n",
              "      <td>0.226899</td>\n",
              "      <td>0.255478</td>\n",
              "      <td>11.812500</td>\n",
              "      <td>0.184815</td>\n",
              "      <td>0.414667</td>\n",
              "      <td>0.122409</td>\n",
              "      <td>0.539486</td>\n",
              "      <td>0.211554</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-926af34b-73b6-424c-b7ee-9f8d776b9457')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-926af34b-73b6-424c-b7ee-9f8d776b9457 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-926af34b-73b6-424c-b7ee-9f8d776b9457');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3c0bd343-be61-499e-955d-e76a5730e3bd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c0bd343-be61-499e-955d-e76a5730e3bd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3c0bd343-be61-499e-955d-e76a5730e3bd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data_matrix_nn",
              "summary": "{\n  \"name\": \"data_matrix_nn\",\n  \"rows\": 910,\n  \"fields\": [\n    {\n      \"column\": \"Uniprot ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 910,\n        \"samples\": [\n          \"Q8NF91\",\n          \"Q9P2D1\",\n          \"O95251\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log2 IDR Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9099449578194586,\n        \"min\": 0.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          2.584962500721156,\n          3.584962500721156,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log10 Total IDR Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4141897249461949,\n        \"min\": 1.3979400086720377,\n        \"max\": 3.3546845539547285,\n        \"num_unique_values\": 341,\n        \"samples\": [\n          2.359835482339888,\n          1.9822712330395684,\n          2.576341350205793\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Positive\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08286954881351015,\n        \"min\": 0.0,\n        \"max\": 0.5142857142857142,\n        \"num_unique_values\": 637,\n        \"samples\": [\n          0.1377049180327869,\n          0.2128712871287128,\n          0.1656441717791411\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Negative\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09852132934673737,\n        \"min\": 0.0,\n        \"max\": 0.76,\n        \"num_unique_values\": 652,\n        \"samples\": [\n          0.0657894736842105,\n          0.1172839506172839,\n          0.0217391304347826\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Expanding\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10547754625210155,\n        \"min\": 0.09375,\n        \"max\": 0.8363105379987722,\n        \"num_unique_values\": 909,\n        \"samples\": [\n          0.3272207273104504,\n          0.4201211978153767,\n          0.3932525947428054\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12866062461867112,\n        \"min\": 0.0,\n        \"max\": 0.8363105379987722,\n        \"num_unique_values\": 907,\n        \"samples\": [\n          0.2965787720899607,\n          0.3017170794112583,\n          0.3176711993939681\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCPR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12842768833174908,\n        \"min\": -0.7594319210814742,\n        \"max\": 0.4638837359390323,\n        \"num_unique_values\": 907,\n        \"samples\": [\n          -0.0841650491244806,\n          -0.0536422239289285,\n          -0.0077388947288111\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kappa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1571748904542537,\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 906,\n        \"samples\": [\n          0.1073983989604272,\n          0.2453450364429741,\n          0.3015797946691642\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Omega\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12160682656806411,\n        \"min\": 0.0066795980517905,\n        \"max\": 0.9183458179578652,\n        \"num_unique_values\": 910,\n        \"samples\": [\n          0.1166190829145467,\n          0.1778727231101551,\n          0.0781171515537581\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Isoelectric Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.1541246824105356,\n        \"min\": 1.75,\n        \"max\": 14.49998664855957,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          3.71875,\n          4.59375,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Uversky Hydropathy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05272485381165818,\n        \"min\": 0.1439276485788114,\n        \"max\": 0.5333333333333333,\n        \"num_unique_values\": 906,\n        \"samples\": [\n          0.3706896551724139,\n          0.2152610441767066,\n          0.3406330749354004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PPII Propensity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.049019246347044694,\n        \"min\": 0.1831067961165048,\n        \"max\": 0.6108,\n        \"num_unique_values\": 905,\n        \"samples\": [\n          0.3852272727272728,\n          0.3695041322314053,\n          0.3203448275862069\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.044796285855544224,\n        \"min\": 0.0,\n        \"max\": 0.3499069863841052,\n        \"num_unique_values\": 906,\n        \"samples\": [\n          0.0277426258803642,\n          0.070226526800308,\n          0.0907593066607752\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta Max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12033442260080407,\n        \"min\": 0.0,\n        \"max\": 0.8185418640522869,\n        \"num_unique_values\": 890,\n        \"samples\": [\n          0.2575234953872736,\n          0.2805974408881118,\n          0.3536360460183175\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.011958998690311,\n        \"min\": -23.75916029986348,\n        \"max\": 24.966789854945635,\n        \"num_unique_values\": 903,\n        \"samples\": [\n          -0.8424893115550515,\n          1.6960516354671622,\n          -1.7563417984982184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Enrichment Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_matrix_nn.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "Oo1SEkkrbxq9",
        "outputId": "dbe33500-504c-4eed-c78e-1a9474fb11f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       log2 IDR Count  log10 Total IDR Length  Fraction Positive  \\\n",
              "count      910.000000              910.000000         910.000000   \n",
              "mean         0.797172                2.018353           0.143988   \n",
              "std          0.909945                0.414190           0.082870   \n",
              "min          0.000000                1.397940           0.000000   \n",
              "25%          0.000000                1.672098           0.085382   \n",
              "50%          1.000000                1.984521           0.133333   \n",
              "75%          1.584963                2.311754           0.188568   \n",
              "max          4.000000                3.354685           0.514286   \n",
              "\n",
              "       Fraction Negative  Fraction Expanding         FCR        NCPR  \\\n",
              "count         910.000000          910.000000  910.000000  910.000000   \n",
              "mean            0.155992            0.417364    0.302977   -0.009276   \n",
              "std             0.098521            0.105478    0.128661    0.128428   \n",
              "min             0.000000            0.093750    0.000000   -0.759432   \n",
              "25%             0.091243            0.354140    0.215698   -0.063214   \n",
              "50%             0.140518            0.414331    0.291191    0.000000   \n",
              "75%             0.202461            0.479334    0.374882    0.059136   \n",
              "max             0.760000            0.836311    0.836311    0.463884   \n",
              "\n",
              "            Kappa       Omega  Isoelectric Point  Uversky Hydropathy  \\\n",
              "count  910.000000  910.000000         910.000000          910.000000   \n",
              "mean     0.244847    0.173121           7.450670            0.354973   \n",
              "std      0.157175    0.121607           3.154125            0.052725   \n",
              "min     -1.000000    0.006680           1.750000            0.143928   \n",
              "25%      0.166276    0.103216           4.375000            0.325059   \n",
              "50%      0.227097    0.146009           7.000000            0.358428   \n",
              "75%      0.305297    0.206152          10.062500            0.389969   \n",
              "max      1.000000    0.918346          14.499987            0.533333   \n",
              "\n",
              "       PPII Propensity       Delta   Delta Max         SCD  Enrichment Label  \n",
              "count       910.000000  910.000000  910.000000  910.000000        910.000000  \n",
              "mean          0.407909    0.060274    0.244460    1.122316          0.537363  \n",
              "std           0.049019    0.044796    0.120334    5.011959          0.498876  \n",
              "min           0.183107    0.000000    0.000000  -23.759160          0.000000  \n",
              "25%           0.379406    0.029113    0.159912   -0.780215          0.000000  \n",
              "50%           0.405843    0.049394    0.235649    0.056107          1.000000  \n",
              "75%           0.435891    0.075584    0.313957    1.828678          1.000000  \n",
              "max           0.610800    0.349907    0.818542   24.966790          1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-940cb732-94c8-46be-91da-2431761f35cb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>log2 IDR Count</th>\n",
              "      <th>log10 Total IDR Length</th>\n",
              "      <th>Fraction Positive</th>\n",
              "      <th>Fraction Negative</th>\n",
              "      <th>Fraction Expanding</th>\n",
              "      <th>FCR</th>\n",
              "      <th>NCPR</th>\n",
              "      <th>Kappa</th>\n",
              "      <th>Omega</th>\n",
              "      <th>Isoelectric Point</th>\n",
              "      <th>Uversky Hydropathy</th>\n",
              "      <th>PPII Propensity</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Delta Max</th>\n",
              "      <th>SCD</th>\n",
              "      <th>Enrichment Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "      <td>910.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.797172</td>\n",
              "      <td>2.018353</td>\n",
              "      <td>0.143988</td>\n",
              "      <td>0.155992</td>\n",
              "      <td>0.417364</td>\n",
              "      <td>0.302977</td>\n",
              "      <td>-0.009276</td>\n",
              "      <td>0.244847</td>\n",
              "      <td>0.173121</td>\n",
              "      <td>7.450670</td>\n",
              "      <td>0.354973</td>\n",
              "      <td>0.407909</td>\n",
              "      <td>0.060274</td>\n",
              "      <td>0.244460</td>\n",
              "      <td>1.122316</td>\n",
              "      <td>0.537363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.909945</td>\n",
              "      <td>0.414190</td>\n",
              "      <td>0.082870</td>\n",
              "      <td>0.098521</td>\n",
              "      <td>0.105478</td>\n",
              "      <td>0.128661</td>\n",
              "      <td>0.128428</td>\n",
              "      <td>0.157175</td>\n",
              "      <td>0.121607</td>\n",
              "      <td>3.154125</td>\n",
              "      <td>0.052725</td>\n",
              "      <td>0.049019</td>\n",
              "      <td>0.044796</td>\n",
              "      <td>0.120334</td>\n",
              "      <td>5.011959</td>\n",
              "      <td>0.498876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.397940</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.093750</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.759432</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.006680</td>\n",
              "      <td>1.750000</td>\n",
              "      <td>0.143928</td>\n",
              "      <td>0.183107</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-23.759160</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.672098</td>\n",
              "      <td>0.085382</td>\n",
              "      <td>0.091243</td>\n",
              "      <td>0.354140</td>\n",
              "      <td>0.215698</td>\n",
              "      <td>-0.063214</td>\n",
              "      <td>0.166276</td>\n",
              "      <td>0.103216</td>\n",
              "      <td>4.375000</td>\n",
              "      <td>0.325059</td>\n",
              "      <td>0.379406</td>\n",
              "      <td>0.029113</td>\n",
              "      <td>0.159912</td>\n",
              "      <td>-0.780215</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.984521</td>\n",
              "      <td>0.133333</td>\n",
              "      <td>0.140518</td>\n",
              "      <td>0.414331</td>\n",
              "      <td>0.291191</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.227097</td>\n",
              "      <td>0.146009</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>0.358428</td>\n",
              "      <td>0.405843</td>\n",
              "      <td>0.049394</td>\n",
              "      <td>0.235649</td>\n",
              "      <td>0.056107</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.584963</td>\n",
              "      <td>2.311754</td>\n",
              "      <td>0.188568</td>\n",
              "      <td>0.202461</td>\n",
              "      <td>0.479334</td>\n",
              "      <td>0.374882</td>\n",
              "      <td>0.059136</td>\n",
              "      <td>0.305297</td>\n",
              "      <td>0.206152</td>\n",
              "      <td>10.062500</td>\n",
              "      <td>0.389969</td>\n",
              "      <td>0.435891</td>\n",
              "      <td>0.075584</td>\n",
              "      <td>0.313957</td>\n",
              "      <td>1.828678</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.354685</td>\n",
              "      <td>0.514286</td>\n",
              "      <td>0.760000</td>\n",
              "      <td>0.836311</td>\n",
              "      <td>0.836311</td>\n",
              "      <td>0.463884</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.918346</td>\n",
              "      <td>14.499987</td>\n",
              "      <td>0.533333</td>\n",
              "      <td>0.610800</td>\n",
              "      <td>0.349907</td>\n",
              "      <td>0.818542</td>\n",
              "      <td>24.966790</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-940cb732-94c8-46be-91da-2431761f35cb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-940cb732-94c8-46be-91da-2431761f35cb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-940cb732-94c8-46be-91da-2431761f35cb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9db4d3d7-2ce6-422a-88b7-b691ad7ee45b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9db4d3d7-2ce6-422a-88b7-b691ad7ee45b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9db4d3d7-2ce6-422a-88b7-b691ad7ee45b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data_matrix_nn\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"log2 IDR Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.31725147125366,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          910.0,\n          0.7971721681301135,\n          1.584962500721156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log10 Total IDR Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.0703025896446,\n        \"min\": 0.4141897249461949,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.0183531736281872,\n          1.9845214836529066,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Positive\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6756176178734,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.14398775060260016,\n          0.1333333333333333,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Negative\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.66049784703944,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.15599155355273955,\n          0.14051820415456773,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Expanding\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.5972631899096,\n        \"min\": 0.09375,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4173640108087942,\n          0.4143310092655082,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.62510138095985,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.30297698096512576,\n          0.29119064071330614,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCPR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.74288095199296,\n        \"min\": -0.7594319210814742,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.009276466871233947,\n          0.0,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kappa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.67845490387776,\n        \"min\": -1.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.24484707727582025,\n          0.2270966244955708,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Omega\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.649103363578,\n        \"min\": 0.0066795980517905,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.1731210423603806,\n          0.1460087768627919,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Isoelectric Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 319.320183169594,\n        \"min\": 1.75,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.4506696281852305,\n          7.0,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Uversky Hydropathy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.62460334935963,\n        \"min\": 0.05272485381165818,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.354973040708432,\n          0.3584283370039285,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PPII Propensity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6087764992302,\n        \"min\": 0.049019246347044694,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.4079093270268746,\n          0.4058428539426524,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.702841543771,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.06027419287883061,\n          0.0493938185056758,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta Max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6380733730111,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.24445988568220556,\n          0.23564902157685608,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.5754038974344,\n        \"min\": -23.75916029986348,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.1223155538709275,\n          0.056107158037200996,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Enrichment Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.52999346503816,\n        \"min\": 0.0,\n        \"max\": 910.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5373626373626373,\n          1.0,\n          0.4988762623287952\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Scale the data from\n",
        "\n",
        "X = data_matrix_nn[columns[1:-1]].values\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X=X)\n",
        "X_scaled = pd.DataFrame(X_scaled, columns=columns[1:-1])\n",
        "X_scaled.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 318
        },
        "id": "jY7vrcDfiqfe",
        "outputId": "3f2d9e55-c63e-4c3b-8678-ff1fc65b50ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       log2 IDR Count  log10 Total IDR Length  Fraction Positive  \\\n",
              "count    9.100000e+02            9.100000e+02       9.100000e+02   \n",
              "mean     7.808162e-17           -8.120488e-16       2.810938e-16   \n",
              "std      1.000550e+00            1.000550e+00       1.000550e+00   \n",
              "min     -8.765481e-01           -1.498720e+00      -1.738479e+00   \n",
              "25%     -8.765481e-01           -8.364421e-01      -7.075931e-01   \n",
              "50%      2.230238e-01           -8.172654e-02      -1.286392e-01   \n",
              "75%      8.662321e-01            7.087622e-01       5.382559e-01   \n",
              "max      3.521739e+00            3.228149e+00       4.470902e+00   \n",
              "\n",
              "       Fraction Negative  Fraction Expanding           FCR          NCPR  \\\n",
              "count       9.100000e+02        9.100000e+02  9.100000e+02  9.100000e+02   \n",
              "mean       -5.465713e-17        3.357510e-16 -1.561632e-17  1.561632e-17   \n",
              "std         1.000550e+00        1.000550e+00  1.000550e+00  1.000550e+00   \n",
              "min        -1.584198e+00       -3.069772e+00 -2.356149e+00 -5.844285e+00   \n",
              "25%        -6.575606e-01       -5.997416e-01 -6.787363e-01 -4.202175e-01   \n",
              "50%        -1.571422e-01       -2.877076e-02 -9.165836e-02  7.227077e-02   \n",
              "75%         4.719235e-01        5.878434e-01  5.591804e-01  5.329841e-01   \n",
              "max         6.134109e+00        3.974087e+00  4.147554e+00  3.686280e+00   \n",
              "\n",
              "              Kappa         Omega  Isoelectric Point  Uversky Hydropathy  \\\n",
              "count  9.100000e+02  9.100000e+02       9.100000e+02        9.100000e+02   \n",
              "mean  -1.483551e-16 -1.639714e-16      -6.246530e-17        2.342449e-16   \n",
              "std    1.000550e+00  1.000550e+00       1.000550e+00        1.000550e+00   \n",
              "min   -7.924495e+00 -1.369438e+00      -1.808364e+00       -4.004970e+00   \n",
              "25%   -5.001729e-01 -5.751622e-01      -9.756624e-01       -5.676692e-01   \n",
              "50%   -1.129965e-01 -2.230728e-01      -1.429612e-01        6.557053e-02   \n",
              "75%    3.848125e-01  2.717689e-01       8.285236e-01        6.641072e-01   \n",
              "max    4.807181e+00  6.131519e+00       2.236181e+00        3.384711e+00   \n",
              "\n",
              "       PPII Propensity         Delta     Delta Max         SCD  \n",
              "count     9.100000e+02  9.100000e+02  9.100000e+02  910.000000  \n",
              "mean     -3.904081e-16  1.561632e-17  4.684897e-17    0.000000  \n",
              "std       1.000550e+00  1.000550e+00  1.000550e+00    1.000550  \n",
              "min      -4.588527e+00 -1.346258e+00 -2.032621e+00   -4.967151  \n",
              "25%      -5.817851e-01 -6.960065e-01 -7.029958e-01   -0.379807  \n",
              "50%      -4.217954e-02 -2.430192e-01 -7.326008e-02   -0.212850  \n",
              "75%       5.711383e-01  3.419440e-01  5.778536e-01    0.141013  \n",
              "max       4.141276e+00  6.469109e+00  4.773345e+00    4.760132  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5a240c1-8ef6-4bd5-b97c-f65faf0973a6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>log2 IDR Count</th>\n",
              "      <th>log10 Total IDR Length</th>\n",
              "      <th>Fraction Positive</th>\n",
              "      <th>Fraction Negative</th>\n",
              "      <th>Fraction Expanding</th>\n",
              "      <th>FCR</th>\n",
              "      <th>NCPR</th>\n",
              "      <th>Kappa</th>\n",
              "      <th>Omega</th>\n",
              "      <th>Isoelectric Point</th>\n",
              "      <th>Uversky Hydropathy</th>\n",
              "      <th>PPII Propensity</th>\n",
              "      <th>Delta</th>\n",
              "      <th>Delta Max</th>\n",
              "      <th>SCD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>9.100000e+02</td>\n",
              "      <td>910.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.808162e-17</td>\n",
              "      <td>-8.120488e-16</td>\n",
              "      <td>2.810938e-16</td>\n",
              "      <td>-5.465713e-17</td>\n",
              "      <td>3.357510e-16</td>\n",
              "      <td>-1.561632e-17</td>\n",
              "      <td>1.561632e-17</td>\n",
              "      <td>-1.483551e-16</td>\n",
              "      <td>-1.639714e-16</td>\n",
              "      <td>-6.246530e-17</td>\n",
              "      <td>2.342449e-16</td>\n",
              "      <td>-3.904081e-16</td>\n",
              "      <td>1.561632e-17</td>\n",
              "      <td>4.684897e-17</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550e+00</td>\n",
              "      <td>1.000550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-8.765481e-01</td>\n",
              "      <td>-1.498720e+00</td>\n",
              "      <td>-1.738479e+00</td>\n",
              "      <td>-1.584198e+00</td>\n",
              "      <td>-3.069772e+00</td>\n",
              "      <td>-2.356149e+00</td>\n",
              "      <td>-5.844285e+00</td>\n",
              "      <td>-7.924495e+00</td>\n",
              "      <td>-1.369438e+00</td>\n",
              "      <td>-1.808364e+00</td>\n",
              "      <td>-4.004970e+00</td>\n",
              "      <td>-4.588527e+00</td>\n",
              "      <td>-1.346258e+00</td>\n",
              "      <td>-2.032621e+00</td>\n",
              "      <td>-4.967151</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-8.765481e-01</td>\n",
              "      <td>-8.364421e-01</td>\n",
              "      <td>-7.075931e-01</td>\n",
              "      <td>-6.575606e-01</td>\n",
              "      <td>-5.997416e-01</td>\n",
              "      <td>-6.787363e-01</td>\n",
              "      <td>-4.202175e-01</td>\n",
              "      <td>-5.001729e-01</td>\n",
              "      <td>-5.751622e-01</td>\n",
              "      <td>-9.756624e-01</td>\n",
              "      <td>-5.676692e-01</td>\n",
              "      <td>-5.817851e-01</td>\n",
              "      <td>-6.960065e-01</td>\n",
              "      <td>-7.029958e-01</td>\n",
              "      <td>-0.379807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.230238e-01</td>\n",
              "      <td>-8.172654e-02</td>\n",
              "      <td>-1.286392e-01</td>\n",
              "      <td>-1.571422e-01</td>\n",
              "      <td>-2.877076e-02</td>\n",
              "      <td>-9.165836e-02</td>\n",
              "      <td>7.227077e-02</td>\n",
              "      <td>-1.129965e-01</td>\n",
              "      <td>-2.230728e-01</td>\n",
              "      <td>-1.429612e-01</td>\n",
              "      <td>6.557053e-02</td>\n",
              "      <td>-4.217954e-02</td>\n",
              "      <td>-2.430192e-01</td>\n",
              "      <td>-7.326008e-02</td>\n",
              "      <td>-0.212850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.662321e-01</td>\n",
              "      <td>7.087622e-01</td>\n",
              "      <td>5.382559e-01</td>\n",
              "      <td>4.719235e-01</td>\n",
              "      <td>5.878434e-01</td>\n",
              "      <td>5.591804e-01</td>\n",
              "      <td>5.329841e-01</td>\n",
              "      <td>3.848125e-01</td>\n",
              "      <td>2.717689e-01</td>\n",
              "      <td>8.285236e-01</td>\n",
              "      <td>6.641072e-01</td>\n",
              "      <td>5.711383e-01</td>\n",
              "      <td>3.419440e-01</td>\n",
              "      <td>5.778536e-01</td>\n",
              "      <td>0.141013</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3.521739e+00</td>\n",
              "      <td>3.228149e+00</td>\n",
              "      <td>4.470902e+00</td>\n",
              "      <td>6.134109e+00</td>\n",
              "      <td>3.974087e+00</td>\n",
              "      <td>4.147554e+00</td>\n",
              "      <td>3.686280e+00</td>\n",
              "      <td>4.807181e+00</td>\n",
              "      <td>6.131519e+00</td>\n",
              "      <td>2.236181e+00</td>\n",
              "      <td>3.384711e+00</td>\n",
              "      <td>4.141276e+00</td>\n",
              "      <td>6.469109e+00</td>\n",
              "      <td>4.773345e+00</td>\n",
              "      <td>4.760132</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5a240c1-8ef6-4bd5-b97c-f65faf0973a6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a5a240c1-8ef6-4bd5-b97c-f65faf0973a6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a5a240c1-8ef6-4bd5-b97c-f65faf0973a6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f8cc4d2-4f11-47d8-8e56-77419c763ec4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f8cc4d2-4f11-47d8-8e56-77419c763ec4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f8cc4d2-4f11-47d8-8e56-77419c763ec4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"X_scaled\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"log2 IDR Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.541728553437,\n        \"min\": -0.8765481134734447,\n        \"max\": 910.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          910.0,\n          7.808161931429673e-17,\n          0.866232110768558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log10 Total IDR Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6093798310296,\n        \"min\": -1.4987197777515604,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -8.120488408686859e-16,\n          -0.08172654247963296,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Positive\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.56523060187914,\n        \"min\": -1.7384785132501235,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.810938295314682e-16,\n          -0.1286392447711938,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Negative\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.4789885063754,\n        \"min\": -1.5841984160893308,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -5.465713352000771e-17,\n          -0.15714219808634047,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraction Expanding\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.6452982098781,\n        \"min\": -3.069771519067156,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.357509630514759e-16,\n          -0.02877076221637156,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FCR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.60847659703256,\n        \"min\": -2.356148899939543,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -1.5616323862859345e-17,\n          -0.09165835810422361,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NCPR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.79359358191897,\n        \"min\": -5.8442846499936,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.5616323862859345e-17,\n          0.07227077086149199,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kappa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.8712356173511,\n        \"min\": -7.924494935703536,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -1.4835507669716377e-16,\n          -0.11299650835133446,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Omega\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.47734238045837,\n        \"min\": -1.369437685305287,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -1.6397140056002313e-16,\n          -0.22307279452323303,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Isoelectric Point\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.678480311038,\n        \"min\": -1.8083636578897329,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -6.246529545143738e-17,\n          -0.14296120113599547,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Uversky Hydropathy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.71268345887904,\n        \"min\": -4.004969791832928,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.342448579428902e-16,\n          0.06557052559004158,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PPII Propensity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.7171524963543,\n        \"min\": -4.588527312024172,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -3.904080965714836e-16,\n          -0.04217954374498041,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.4635655836714,\n        \"min\": -1.346257546474225,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.5616323862859345e-17,\n          -0.24301919957303972,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delta Max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.5606316593285,\n        \"min\": -2.032621338249635,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.6848971588578034e-17,\n          -0.0732600783927092,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SCD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.7270911186583,\n        \"min\": -4.967151223417918,\n        \"max\": 910.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          -0.2128498473690451,\n          910.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate dataset\n",
        "class IDRFeaturesDataset(Dataset):\n",
        "    def __init__(self, X, y):\n",
        "        self.X = torch.Tensor(np.array(X))  # store X as a pytorch Tensor\n",
        "        self.y = torch.Tensor(np.array(y))  # store y as a pytorch Tensor\n",
        "        self.len = len(self.X)              # number of samples in the data\n",
        "\n",
        "    def __getitem__(self, index):\n",
        "        # your implementation here:\n",
        "        return self.X[index], self.y[index]\n",
        "    def __len__(self):\n",
        "        return self.len\n",
        "\n",
        "# Assign data\n",
        "X_scaled = X_scaled[columns[1:-1]]\n",
        "y = data_matrix_nn['Enrichment Label'].values\n",
        "\n",
        "# Do a test:train 20:80 split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "        X, y, test_size=0.2, train_size=0.8)\n",
        "# Divide the train set into a validation:train 10:90 split\n",
        "X_train, X_val, y_train, y_val = train_test_split(\n",
        "        X_train, y_train, test_size=0.2, train_size=0.8)\n",
        "\n",
        "#Build Dataset\n",
        "train_data = IDRFeaturesDataset(X_train, y_train) # fill in code here\n",
        "val_data = IDRFeaturesDataset(X_val, y_val) # fill in code here\n",
        "test_data = IDRFeaturesDataset(X_test, y_test) # fill in code here\n",
        "\n",
        "# Build DataLoader\n",
        "batch_size = 8\n",
        "train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n",
        "val_loader = DataLoader(val_data, batch_size=batch_size, shuffle=True)\n",
        "test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=True)"
      ],
      "metadata": {
        "id": "wWMrry-RnTJp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Set up model\n",
        "\n",
        "class IDRFeatureNN(torch.nn.Module) :\n",
        "    def __init__(self, hidden_dim, dropout_prob, input_dim=15) :\n",
        "        super().__init__()\n",
        "\n",
        "        # Define a MLP regressor\n",
        "        self.mlp = nn.Sequential(\n",
        "            nn.Linear(input_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(p=dropout_prob),\n",
        "            nn.Linear(hidden_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(p=dropout_prob),\n",
        "            nn.Linear(hidden_dim, 1)\n",
        "        )\n",
        "\n",
        "        # Define a sigmoid transform\n",
        "        self.sigmoid = nn.Sigmoid()\n",
        "\n",
        "    def forward(self, x):\n",
        "\n",
        "        # Pass output into a MLP\n",
        "        mlp_out = self.mlp(x)\n",
        "\n",
        "        # Transform output into probabilites\n",
        "        proba = self.sigmoid(mlp_out)\n",
        "\n",
        "        # Return probabilities\n",
        "        return proba"
      ],
      "metadata": {
        "id": "SnnjRpJPpFad"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Set up model\n",
        "\n",
        "class IDRFeatureNN_fully_connected(torch.nn.Module) :\n",
        "    def __init__(self, hidden_dim, input_dim=15) :\n",
        "        super().__init__()\n",
        "\n",
        "        # Define a MLP regressor\n",
        "        self.mlp = nn.Sequential(\n",
        "            nn.Linear(input_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(hidden_dim, hidden_dim),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(hidden_dim, 1)\n",
        "        )\n",
        "\n",
        "        # Define a sigmoid transform\n",
        "        self.sigmoid = nn.Sigmoid()\n",
        "\n",
        "    def forward(self, x):\n",
        "\n",
        "        # Pass output into a MLP\n",
        "        mlp_out = self.mlp(x)\n",
        "\n",
        "        # Transform output into probabilites\n",
        "        proba = self.sigmoid(mlp_out)\n",
        "\n",
        "        # Return probabilities\n",
        "        return proba"
      ],
      "metadata": {
        "id": "QaPQiPr7-8pa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rVLRqmtgfv-O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dccfbf6b-0639-44fa-c5ad-10f329c8987e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([8, 1])\n"
          ]
        }
      ],
      "source": [
        "# Test your ouput on a batch\n",
        "\n",
        "# Send your batch to a GPU\n",
        "X_batch, y_batch = next(iter(train_loader))\n",
        "X_batch = X_batch.to(\"cpu\")\n",
        "y_batch = y_batch.to(\"cpu\")\n",
        "\n",
        "clf = IDRFeatureNN(hidden_dim=8, dropout_prob=0.5).to('cpu')\n",
        "print(clf(X_batch).shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def train(model, dataloader, optimizer, device):\n",
        "\n",
        "    '''\n",
        "    A function to train on the entire dataset for one epoch.\n",
        "\n",
        "    Args:\n",
        "        model (torch.nn.Module): Your sequence classifier\n",
        "        dataloader (torch.utils.data.Dataloader): DataLoader object for the train data\n",
        "        optimizer (torch.optim.Optimizer): Optimizer object to interface gradient calculation and optimization\n",
        "        device (str): Your device\n",
        "\n",
        "    Returns:\n",
        "        float: loss averaged over all the batches\n",
        "\n",
        "    '''\n",
        "\n",
        "    batch_loss = []\n",
        "    model.train() # Set model to training mode\n",
        "\n",
        "    for batch in dataloader:\n",
        "        X, label = batch\n",
        "        X = X.to(device)\n",
        "        label = label.to(device)\n",
        "\n",
        "        # train your model on each batch here\n",
        "        pred = model(X)\n",
        "        loss = nn.functional.binary_cross_entropy(pred.squeeze(),label.squeeze())\n",
        "        batch_loss.append(loss.item())\n",
        "\n",
        "        # run backpropagation given the loss you defined\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "    return np.array(batch_loss).mean()\n",
        "\n",
        "\n",
        "def validate(model, dataloader, device):\n",
        "\n",
        "    '''\n",
        "    A function to validate on the validation dataset for one epoch.\n",
        "\n",
        "    Args:\n",
        "        model (torch.nn.Module): Your sequence classifier\n",
        "        dataloader (torch.utils.data.Dataloader): DataLoader object for the validation data\n",
        "        device (str): Your device\n",
        "\n",
        "    Returns:\n",
        "        float: loss averaged over all the batches\n",
        "\n",
        "    '''\n",
        "\n",
        "    val_loss = []\n",
        "    model.eval() # Set model to evaluation mode\n",
        "    with torch.no_grad():\n",
        "        for batch in dataloader:\n",
        "            X, label = batch\n",
        "            X = X.to(device)\n",
        "            label = label.to(device)\n",
        "\n",
        "            # validate your model on each batch here\n",
        "            pred = model(X)\n",
        "            loss = nn.functional.binary_cross_entropy(pred.squeeze(),label.squeeze())\n",
        "            val_loss.append(loss.item())\n",
        "\n",
        "    return np.array(val_loss).mean()\n",
        "\n",
        "def evaluate(model, dataloader, device):\n",
        "\n",
        "    '''\n",
        "    A function to return the classification probabilities and true labels (for evaluation).\n",
        "\n",
        "    Args:\n",
        "        model (torch.nn.Module): your sequence classifier\n",
        "        dataloader (torch.utils.data.Dataloader): DataLoader object for the train data\n",
        "        device (str): Your device\n",
        "\n",
        "    Returns:\n",
        "        (np.array, np.array): true labels, predicted probabilities\n",
        "    '''\n",
        "\n",
        "    pred_prob = []\n",
        "    labels = []\n",
        "    with torch.no_grad():\n",
        "        model.eval()\n",
        "        for batch in dataloader:\n",
        "            epoch_loss = []\n",
        "            X, label = batch\n",
        "\n",
        "            X = X.to(device)\n",
        "            label = label.to(device)\n",
        "\n",
        "            # evaluate your model here\n",
        "            pred = model(X)\n",
        "            pred_prob += pred.cpu().numpy().ravel().tolist()\n",
        "            labels += label.cpu().numpy().ravel().tolist()\n",
        "\n",
        "    return labels, pred_prob"
      ],
      "metadata": {
        "id": "bi3GUSNWqMrx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for hidden_layers in [16]:\n",
        "  for prob_dropout in [0.2]:\n",
        "    for lr in [0.01]:\n",
        "\n",
        "      device = 'cuda:0'\n",
        "      model = IDRFeatureNN(hidden_dim=hidden_layers, dropout_prob=prob_dropout).to(device)\n",
        "\n",
        "      optimizer = torch.optim.Adam(list(model.parameters()), lr=lr)\n",
        "      scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', verbose=True, factor=0.5)\n",
        "\n",
        "      val_loss_curve = []\n",
        "      train_loss_curve = []\n",
        "\n",
        "      # Use tqdm for progress bar\n",
        "      tqdm_progress =  tqdm(range(500), desc=\"Progress\")\n",
        "\n",
        "      for epoch in tqdm_progress:\n",
        "          # Compute train your model on training data\n",
        "          epoch_loss = train(model, train_loader, optimizer,  device=device)\n",
        "\n",
        "          # Validate your on validation data\n",
        "          val_loss = validate(model, val_loader, device=device)\n",
        "\n",
        "          # Record train and loss performance\n",
        "          train_loss_curve.append(epoch_loss)\n",
        "          val_loss_curve.append(val_loss)\n",
        "\n",
        "          # The learning rate scheduler record the validation loss\n",
        "          scheduler.step(val_loss)\n",
        "          tqdm_progress.set_postfix(train_loss=f'{epoch_loss:.3f}', val_loss=f'{val_loss:.3f}', refresh=True)\n",
        "\n",
        "      print ('-------------------Performance metrics -----------')\n",
        "      print('Number of hidden layers: ', str(hidden_layers))\n",
        "      print('Dropout probability: ', str(prob_dropout))\n",
        "      print('Learning Rate:', str(lr))\n",
        "      fig, ax = plt.subplots(figsize=(6, 4))\n",
        "      ax.plot(val_loss_curve, label='Validation Loss')\n",
        "      ax.plot(train_loss_curve, label='Training Loss')\n",
        "      ax.set_xlabel('Epoch')\n",
        "      ax.set_ylabel('Loss')\n",
        "      ax.legend(loc='upper right')\n",
        "      fig.tight_layout()\n",
        "      plt.show()\n",
        "\n",
        "      ################ Code #################\n",
        "      labels, pred_prob = evaluate(model, test_loader, device)\n",
        "      test_score = roc_auc_score(labels, pred_prob)\n",
        "      ################ Code #################\n",
        "\n",
        "      print(\"AUC on the test dataset is {}.\".format(test_score) )\n",
        "\n",
        "      pred_label = np.zeros(len(pred_prob))\n",
        "      for i in range(len(pred_prob)):\n",
        "        if pred_prob[i] >= 0.5:\n",
        "          pred_label[i] = 1\n",
        "        else:\n",
        "          pred_label[i] = 0\n",
        "      conf_matrix = confusion_matrix(labels, pred_label)\n",
        "\n",
        "      # Print confusion matrix\n",
        "      print(\"Confusion Matrix:\")\n",
        "      print(conf_matrix)\n",
        "\n",
        "      print ('---------------------------------------------')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "id": "wujQQrbssdSK",
        "outputId": "0c96129d-5c30-458e-e0fa-cb57519edbc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torch/optim/lr_scheduler.py:28: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
            "  warnings.warn(\"The verbose parameter is deprecated. Please use get_last_lr() \"\n",
            "Progress: 100%|██████████| 500/500 [01:29<00:00,  5.57it/s, train_loss=0.607, val_loss=0.619]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------Performance metrics -----------\n",
            "Number of hidden layers:  16\n",
            "Dropout probability:  0.2\n",
            "Learning Rate: 0.01\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC on the test dataset is 0.6859407644094875.\n",
            "Confusion Matrix:\n",
            "[[57 22]\n",
            " [37 66]]\n",
            "---------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ! pip install shap\n",
        "import shap\n",
        "\n",
        "# # Convert numpy arrays to PyTorch tensors\n",
        "# X_train_tensor = torch.tensor(X_train).float()\n",
        "# X_test_tensor = torch.tensor(X_test).float()\n",
        "\n",
        "# # Define a function to get SHAP values from the PyTorch model\n",
        "# def get_shap_values(input_data):\n",
        "#     # Create a SHAP explainer using the PyTorch model\n",
        "#     explainer = shap.Explainer(model, input_data)\n",
        "\n",
        "#     # Compute SHAP values\n",
        "#     shap_values = explainer(input_data)\n",
        "#     return shap_values\n",
        "\n",
        "# # Compute SHAP values for the training data\n",
        "# shap_values_train = get_shap_values(X_train_tensor)\n",
        "\n",
        "# # Training data as dataframe\n",
        "# df_train = pd.DataFrame(X_train, columns = ['log2 IDR Count', 'log10 Total IDR Length', 'Fraction Positive',\n",
        "#            'Fraction Negative', 'Fraction Expanding', 'FCR', 'NCPR', 'Kappa',\n",
        "#            'Omega', 'Isoelectric Point', 'Uversky Hydropathy', 'PPII Propensity',\n",
        "#            'Delta', 'Delta Max', 'SCD'])\n",
        "\n",
        "# # Plot the SHAP values\n",
        "# shap.summary_plot(shap_values_train, df_train)\n",
        "# plt.show()\n",
        "\n",
        "# from torch import Variable\n",
        "\n",
        "# Get features\n",
        "train_features_df = pd.DataFrame(X_train, columns = ['log2 IDR Count', 'log10 Total IDR Length', 'Fraction Positive',\n",
        "            'Fraction Negative', 'Fraction Expanding', 'FCR', 'NCPR', 'Kappa',\n",
        "           'Omega', 'Isoelectric Point', 'Uversky Hydropathy', 'PPII Propensity',\n",
        "           'Delta', 'Delta Max', 'SCD']) # pandas dataframe\n",
        "test_features_df = pd.DataFrame(X_test, columns = ['log2 IDR Count', 'log10 Total IDR Length', 'Fraction Positive',\n",
        "            'Fraction Negative', 'Fraction Expanding', 'FCR', 'NCPR', 'Kappa',\n",
        "           'Omega', 'Isoelectric Point', 'Uversky Hydropathy', 'PPII Propensity',\n",
        "           'Delta', 'Delta Max', 'SCD']) # pandas dataframe\n",
        "\n",
        "\n",
        "\n",
        "# Define function to wrap model to transform data to tensor\n",
        "f = lambda x: model(torch.Tensor(x).to(device='cuda:0')).detach()\n",
        "\n",
        "# Convert my pandas dataframe to numpy\n",
        "data = test_features_df.to_numpy(dtype=np.float32)\n",
        "\n",
        "# The explainer doesn't like tensors, hence the f function\n",
        "explainer = shap.KernelExplainer(f, data)\n",
        "\n",
        "# Get the shap values from my test data\n",
        "shap_values = explainer.shap_values(data)\n",
        "\n",
        "# Enable the plots in jupyter\n",
        "shap.initjs()\n",
        "\n",
        "feature_names = test_features_df.columns\n",
        "# Plots\n",
        "#shap.force_plot(explainer.expected_value, shap_values[0], feature_names)\n",
        "#shap.dependence_plot(\"b1_price_avg\", shap_values[0], data, feature_names)\n",
        "shap.summary_plot(shap_values[0], data, feature_names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "7jzaAfzn2sln",
        "outputId": "dd81d36e-45af-4140-b024-87296241660e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:shap:Using 182 background data samples could cause slower run times. Consider using shap.sample(data, K) or shap.kmeans(data, K) to summarize the background as K samples.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-e8d3a6c0edeb>\u001b[0m in \u001b[0;36m<cell line: 51>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;31m# The explainer doesn't like tensors, hence the f function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m \u001b[0mexplainer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mKernelExplainer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;31m# Get the shap values from my test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/shap/explainers/_kernel.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, model, data, feature_names, link, **kwargs)\u001b[0m\n\u001b[1;32m    125\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0msafe_isinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_null\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"tensorflow.python.framework.ops.SymbolicTensor\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m             \u001b[0mmodel_null\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_symbolic_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_null\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 127\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfnull\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_null\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    128\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpected_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinkfv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfnull\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_tensor.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   1060\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mhandle_torch_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__array__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1061\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1062\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1063\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1064\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "for hidden_layers in [8, 16]:\n",
        "  for lr in [0.001, 0.01]:\n",
        "\n",
        "    device = 'cuda:0'\n",
        "    model = IDRFeatureNN_fully_connected(hidden_dim=hidden_layers).to(device)\n",
        "\n",
        "    optimizer = torch.optim.Adam(list(model.parameters()), lr=lr)\n",
        "    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', verbose=True, factor=0.5)\n",
        "\n",
        "    val_loss_curve = []\n",
        "    train_loss_curve = []\n",
        "\n",
        "    # Use tqdm for progress bar\n",
        "    tqdm_progress =  tqdm(range(500), desc=\"Progress\")\n",
        "\n",
        "    for epoch in tqdm_progress:\n",
        "        # Compute train your model on training data\n",
        "        epoch_loss = train(model, train_loader, optimizer,  device=device)\n",
        "\n",
        "        # Validate your on validation data\n",
        "        val_loss = validate(model, val_loader, device=device)\n",
        "\n",
        "        # Record train and loss performance\n",
        "        train_loss_curve.append(epoch_loss)\n",
        "        val_loss_curve.append(val_loss)\n",
        "\n",
        "        # The learning rate scheduler record the validation loss\n",
        "        scheduler.step(val_loss)\n",
        "        tqdm_progress.set_postfix(train_loss=f'{epoch_loss:.3f}', val_loss=f'{val_loss:.3f}', refresh=True)\n",
        "\n",
        "    print ('-------------------Performance metrics -----------')\n",
        "    print('Number of hidden layers: ', str(hidden_layers))\n",
        "    print('Dropout probability: ', str(prob_dropout))\n",
        "    print('Learning Rate:', str(lr))\n",
        "    fig, ax = plt.subplots(figsize=(6, 4))\n",
        "    ax.plot(val_loss_curve, label='Validation Loss')\n",
        "    ax.plot(train_loss_curve, label='Training Loss')\n",
        "    ax.set_xlabel('Epoch')\n",
        "    ax.set_ylabel('Loss')\n",
        "    ax.legend(loc='upper right')\n",
        "    fig.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    ################ Code #################\n",
        "    labels, pred_prob = evaluate(model, test_loader, device)\n",
        "    test_score = roc_auc_score(labels, pred_prob)\n",
        "    ################ Code #################\n",
        "\n",
        "    print(\"AUC on the test dataset is {}.\".format(test_score) )\n",
        "\n",
        "    pred_label = np.zeros(len(pred_prob))\n",
        "    for i in range(len(pred_prob)):\n",
        "      if pred_prob[i] >= 0.5:\n",
        "        pred_label[i] = 1\n",
        "      else:\n",
        "        pred_label[i] = 0\n",
        "    conf_matrix = confusion_matrix(labels, pred_label)\n",
        "\n",
        "    # Print confusion matrix\n",
        "    print(\"Confusion Matrix:\")\n",
        "    print(conf_matrix)\n",
        "\n",
        "    print ('---------------------------------------------')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "cCaDbE3c_Fys",
        "outputId": "29f4309b-957c-451c-ba91-3ff0e7b9732c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torch/optim/lr_scheduler.py:28: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
            "  warnings.warn(\"The verbose parameter is deprecated. Please use get_last_lr() \"\n",
            "Progress: 100%|██████████| 500/500 [01:14<00:00,  6.71it/s, train_loss=0.600, val_loss=0.619]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------Performance metrics -----------\n",
            "Number of hidden layers:  8\n",
            "Dropout probability:  0.5\n",
            "Learning Rate: 0.001\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torch/optim/lr_scheduler.py:28: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
            "  warnings.warn(\"The verbose parameter is deprecated. Please use get_last_lr() \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC on the test dataset is 0.6329896907216496.\n",
            "Confusion Matrix:\n",
            "[[51 34]\n",
            " [35 62]]\n",
            "---------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Progress: 100%|██████████| 500/500 [01:15<00:00,  6.59it/s, train_loss=0.582, val_loss=0.582]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------Performance metrics -----------\n",
            "Number of hidden layers:  8\n",
            "Dropout probability:  0.5\n",
            "Learning Rate: 0.01\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torch/optim/lr_scheduler.py:28: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
            "  warnings.warn(\"The verbose parameter is deprecated. Please use get_last_lr() \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC on the test dataset is 0.6353547604608853.\n",
            "Confusion Matrix:\n",
            "[[47 38]\n",
            " [35 62]]\n",
            "---------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Progress: 100%|██████████| 500/500 [01:16<00:00,  6.58it/s, train_loss=0.595, val_loss=0.622]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------Performance metrics -----------\n",
            "Number of hidden layers:  16\n",
            "Dropout probability:  0.5\n",
            "Learning Rate: 0.001\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torch/optim/lr_scheduler.py:28: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
            "  warnings.warn(\"The verbose parameter is deprecated. Please use get_last_lr() \"\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC on the test dataset is 0.652152819890843.\n",
            "Confusion Matrix:\n",
            "[[53 32]\n",
            " [36 61]]\n",
            "---------------------------------------------\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Progress: 100%|██████████| 500/500 [01:17<00:00,  6.48it/s, train_loss=0.574, val_loss=0.628]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------------------Performance metrics -----------\n",
            "Number of hidden layers:  16\n",
            "Dropout probability:  0.5\n",
            "Learning Rate: 0.01\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC on the test dataset is 0.6275924802910855.\n",
            "Confusion Matrix:\n",
            "[[40 45]\n",
            " [34 63]]\n",
            "---------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Develop model with features from ProtBERT"
      ],
      "metadata": {
        "id": "b6WNT5jDEtLM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install transformers evaluate datasets requests"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k2rzjquQu8MI",
        "outputId": "52ec0533-3097-453e-df7d-ac064a3f6450"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.38.2)\n",
            "Requirement already satisfied: evaluate in /usr/local/lib/python3.10/dist-packages (0.4.1)\n",
            "Requirement already satisfied: datasets in /usr/local/lib/python3.10/dist-packages (2.18.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.31.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.13.3)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.20.3)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.1)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2023.12.25)\n",
            "Requirement already satisfied: tokenizers<0.19,>=0.14 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.15.2)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.2)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.2)\n",
            "Requirement already satisfied: dill in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.3.8)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from evaluate) (1.5.3)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from evaluate) (3.4.1)\n",
            "Requirement already satisfied: multiprocess in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.70.16)\n",
            "Requirement already satisfied: fsspec[http]>=2021.05.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (2023.6.0)\n",
            "Requirement already satisfied: responses<0.19 in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.18.0)\n",
            "Requirement already satisfied: pyarrow>=12.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (14.0.2)\n",
            "Requirement already satisfied: pyarrow-hotfix in /usr/local/lib/python3.10/dist-packages (from datasets) (0.6)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets) (3.9.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.2.2)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.3.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (23.2.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.4.1)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (6.0.5)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.9.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (4.0.3)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers) (4.10.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->evaluate) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->evaluate) (2023.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->evaluate) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from huggingface_hub import notebook_login\n",
        "\n",
        "notebook_login()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113,
          "referenced_widgets": [
            "b1a650b9301f457997d8072b60764885",
            "1cfc4210e6c84351a1cc1a8d080e4b9d",
            "f13f3af2520f492f903ce12cb4df842f",
            "a04b5c88c7714f698aaacd1de9a86a66",
            "0a255537a2544f11b5602ecf397d04fe",
            "16480be733c540b7bfcb49663c682d33",
            "d20983c840f046329cc2504c744da28e",
            "0c34070275704957b57fcb2424376c88",
            "637a1f035b5b4e6a8a849175394246b7",
            "6c84196fc84e4236920b3a0abe1f30f2",
            "77c620428b244659b0ec898540891067",
            "53bb24b0d025499ab65ef3f7062c90b2",
            "691a26b6fe5243f1afcab86428907650",
            "ed0486d31ee5486b95682ac20ba8f774",
            "fef2f32ca24a4c719217f496fef9cf40",
            "71cdb154fc76442f9d69c30dc03edca7",
            "0cfb8d0de031425cb0ba745dbddce9e1",
            "8fee6032c1304475a18ef8226f59c010",
            "eb1c31ae41754153915a44a4701904d8",
            "e73cf3f5aa15460ebe4c4d3936cfc0dc",
            "55c88b28e7ed46868f5a3988a83fa757",
            "d1858a80a8b2464aa32ebcc5b92132b2",
            "842d62454b0b432f9a5ba9f88f2367a9",
            "db7346985cb048e8b58d55f6f38f83a0",
            "4a59dadf9d104f6ba61512d50fe64c3f",
            "ca06a1c252b74bfa827a0c171ae0824c",
            "56fbe9e77cc1424195fc33737c7874d9",
            "6fc6f0e09c9948d1a3457a06a2288a98",
            "0c0d4537459b4f1cbe8f5a7e94ce5ca9"
          ]
        },
        "id": "s-DwpSMzTHMH",
        "outputId": "1409c5ab-a9ee-4d22-dae2-e17516373c66"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "b1a650b9301f457997d8072b60764885"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!apt install git-lfs"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "COfYkzIITLDw",
        "outputId": "311bf86a-493f-4709-eb4a-0da89fc6ca16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "git-lfs is already the newest version (3.0.2-1ubuntu0.2).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 39 not upgraded.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "partition_ratios = pd.read_csv('/content/drive/My Drive/Colab Notebooks/ML_for_IDRs/partition_ratios.csv')\n",
        "# fasta_file = pd.read_csv('/content/drive/My Drive/Colab Notebooks/ML_for_IDRs/full_protein_sequences.csv')\n",
        "\n",
        "data_dict = {'Uniprot ID': [], 'Full Sequence': [], 'Log Partition Ratios': []}\n",
        "\n",
        "for sequence in SeqIO.parse('/content/drive/My Drive/Colab Notebooks/ML_for_IDRs/full_protein_sequences.fasta', 'fasta'):\n",
        "  uniprot_id = sequence.id.split('|')[1]\n",
        "  data_dict['Uniprot ID'].append(uniprot_id)\n",
        "  data_dict['Full Sequence'].append(str(sequence.seq))\n",
        "  data_dict['Log Partition Ratios'].append(partition_ratios[partition_ratios['Uniprot ID']==uniprot_id]['Log2(average_P/S)'].values[0])\n",
        "\n",
        "dataset_protbert = pd.DataFrame(data_dict)\n",
        "dataset_protbert.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "CziZOyrNUGdQ",
        "outputId": "1ae020f9-5b92-4697-a757-a7219630545b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Uniprot ID                                      Full Sequence  \\\n",
              "0     Q8WUM0  MFPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPLGSAVSSP...   \n",
              "1     P62917  MGRVIRGQRKGAGSVFRAHVKHRKGAARLRAVDFAERHGYIKGIVK...   \n",
              "2     Q8NFH3  MEEIYAKFVSQKISKTRWRPLPPGSLQTAETFATGSWDNEENYISL...   \n",
              "3     Q9NVP1  MSHLPMKLLRKKIEKRNLKLRQRNLKFQGASNLTLSETQNGDVSEE...   \n",
              "4     Q8N7H5  MAPTIQTQAQREDGHRPNSHRTLPERSGVVCRVKYCNSLPDIPFDP...   \n",
              "5     Q8WUA4  MDTCGVGYVALGEAGPVGNMTVVDSPGQEVLNQLDVKTSSEMTSAE...   \n",
              "6     Q8WVC0  MADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSESD...   \n",
              "7     P55884  MQDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAA...   \n",
              "8     Q9Y5Q8  MAAEAADLGLGAAVPVELRRERRMVCVEYPGVVRDVAKMLPTLGGE...   \n",
              "9     Q13347  MKPILLQGHERSITQIKYNREGDLLFTVAKDPIVNVWYSVNGERLG...   \n",
              "\n",
              "   Log Partition Ratios  \n",
              "0             10.371906  \n",
              "1              9.667730  \n",
              "2              9.605071  \n",
              "3              9.565771  \n",
              "4              9.189393  \n",
              "5              9.121233  \n",
              "6              9.007168  \n",
              "7              8.627768  \n",
              "8              7.997080  \n",
              "9              7.988217  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-782867db-0df8-486b-9caf-fc91acd035b8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Uniprot ID</th>\n",
              "      <th>Full Sequence</th>\n",
              "      <th>Log Partition Ratios</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Q8WUM0</td>\n",
              "      <td>MFPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPLGSAVSSP...</td>\n",
              "      <td>10.371906</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P62917</td>\n",
              "      <td>MGRVIRGQRKGAGSVFRAHVKHRKGAARLRAVDFAERHGYIKGIVK...</td>\n",
              "      <td>9.667730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Q8NFH3</td>\n",
              "      <td>MEEIYAKFVSQKISKTRWRPLPPGSLQTAETFATGSWDNEENYISL...</td>\n",
              "      <td>9.605071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Q9NVP1</td>\n",
              "      <td>MSHLPMKLLRKKIEKRNLKLRQRNLKFQGASNLTLSETQNGDVSEE...</td>\n",
              "      <td>9.565771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Q8N7H5</td>\n",
              "      <td>MAPTIQTQAQREDGHRPNSHRTLPERSGVVCRVKYCNSLPDIPFDP...</td>\n",
              "      <td>9.189393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Q8WUA4</td>\n",
              "      <td>MDTCGVGYVALGEAGPVGNMTVVDSPGQEVLNQLDVKTSSEMTSAE...</td>\n",
              "      <td>9.121233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Q8WVC0</td>\n",
              "      <td>MADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSESD...</td>\n",
              "      <td>9.007168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P55884</td>\n",
              "      <td>MQDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAA...</td>\n",
              "      <td>8.627768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Q9Y5Q8</td>\n",
              "      <td>MAAEAADLGLGAAVPVELRRERRMVCVEYPGVVRDVAKMLPTLGGE...</td>\n",
              "      <td>7.997080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Q13347</td>\n",
              "      <td>MKPILLQGHERSITQIKYNREGDLLFTVAKDPIVNVWYSVNGERLG...</td>\n",
              "      <td>7.988217</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-782867db-0df8-486b-9caf-fc91acd035b8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-782867db-0df8-486b-9caf-fc91acd035b8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-782867db-0df8-486b-9caf-fc91acd035b8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fca389e5-dc25-4d2a-8da5-0ad1e8291199\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fca389e5-dc25-4d2a-8da5-0ad1e8291199')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fca389e5-dc25-4d2a-8da5-0ad1e8291199 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset_protbert",
              "summary": "{\n  \"name\": \"dataset_protbert\",\n  \"rows\": 3275,\n  \"fields\": [\n    {\n      \"column\": \"Uniprot ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3274,\n        \"samples\": [\n          \"O95391\",\n          \"P21283\",\n          \"Q70J99\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Full Sequence\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3274,\n        \"samples\": [\n          \"MSATVVDAVNAAPLSGSKEMSLEEPKKMTREDWRKKKELEEQRKLGNAPAEVDEEGKDINPHIPQYISSVPWYIDPSKRPTLKHQRPQPEKQKQFSSSGEWYKRGVKENSIITKYRKGACENCGAMTHKKKDCFERPRRVGAKFTGTNIAPDEHVQPQLMFDYDGKRDRWNGYNPEEHMKIVEEYAKVDLAKRTLKAQKLQEELASGKLVEQANSPKHQWGEEEPNSQMEKDHNSEDEDEDKYADDIDMPGQNFDSKRRITVRNLRIREDIAKYLRNLDPNSAYYDPKTRAMRENPYANAGKNPDEVSYAGDNFVRYTGDTISMAQTQLFAWEAYDKGSEVHLQADPTKLELLYKSFKVKKEDFKEQQKESILEKYGGQEHLDAPPAELLLAQTEDYVEYSRHGTVIKGQERAVACSKYEEDVKIHNHTHIWGSYWKEGRWGYKCCHSFFKYSYCTGEAGKEIVNSEECIINEITGEESVKKPQTLMELHQEKLKEEKKKKKKKKKKHRKSSSDSDDEEKKHEKLKKALNAEEARLLHVKETMQIDERKRPYNSMYETREPTEEEMEAYRMKRQRPDDPMASFLGQ\",\n          \"MTEFWLISAPGEKTCQQTWEKLHAATSKNNNLAVTSKFNIPDLKVGTLDVLVGLSDELAKLDAFVEGVVKKVAQYMADVLEDSKDKVQENLLANGVDLVTYITRFQWDMAKYPIKQSLKNISEIIAKGVTQIDNDLKSRASAYNNLKGNLQNLERKNAGSLLTRSLAEIVKKDDFVLDSEYLVTLLVVVPKLNHNDWIKQYETLAEMVVPRSSNVLSEDQDSYLCNVTLFRKAVDDFRHKARENKFIVRDFQYNEEEMKADKEEMNRLSTDKKKQFGPLVRWLKVNFSEAFIAWIHVKALRVFVESVLRYGLPVNFQAMLLQPNKKTLKKLREVLHELYKHLDSSAAAIIDAPMDIPGLNLSQQEYYPYVYYKIDCNLLEFK\",\n          \"MATLLSHPQQRPPFLRQAIKIRRRRVRDLQDPPPQMAPEIQPPSHHFSPEQRALLYEDALYTVLHRLGHPEPNHVTEASELLRYLQEAFHVEPEEHQQTLQRVRELEKPIFCLKATVKQAKGILGKDVSGFSDPYCLLGIEQGVGVPGGSPGSRHRQKAVVRHTIPEEETHRTQVITQTLNPVWDETFILEFEDITNASFHLDMWDLDTVESVRQKLGELTDLHGLRRIFKEARKDKGQDDFLGNVVLRLQDLRCREDQWYPLEPRTETYPDRGQCHLQFQLIHKRRATSASRSQPSYTVHLHLLQQLVSHEVTQHEAGSTSWDGSLSPQAATVLFLHATQKDLSDFHQSMAQWLAYSRLYQSLEFPSSCLLHPITSIEYQWIQGRLKAEQQEELAASFSSLLTYGLSLIRRFRSVFPLSVSDSPARLQSLLRVLVQMCKMKAFGELCPNTAPLPQLVTEALQTGTTEWFHLKQQHHQPMVQGIPEAGKALLGLVQDVIGDLHQCQRTWDKIFHNTLKIHLFSMAFRELQWLVAKRVQDHTTVVGDVVSPEMGESLFQLYISLKELCQLRMSSSERDGVLALDNFHRWFQPAIPSWLQKTYNEALARVQRAVQMDELVPLGELTKHSTSAVDLSTCFAQISHTARQLDWPDPEEAFMITVKFVEDTCRLALVYCSLIKARARELSSGQKDQGQAANMLCVVVNDMEQLRLVIGKLPAQLAWEALEQRVGAVLEQGQLQNTLHAQLQSALAGLGHEIRTGVRTLAEQLEVGIAKHIQKLVGVRESVLPEDAILPLMKFLEVELCYMNTNLVQENFSSLLTLLWTHTLTVLVEAAASQRSSSLASNRLKIALQNLEICFHAEGCGLPPKALHTATFQALQRDLELQAASSRELIRKYFCSRIQQQAETTSEELGAVTVKASYRASEQKLRVELLSASSLLPLDSNGSSDPFVQLTLEPRHEFPELAARETQKHKKDLHPLFDETFEFLVPAEPCRKAGACLLLTVLDYDTLGADDLEGEAFLPLREVPGLSGSEEPGEVPQTRLPLTYPAPNGDPILQLLEGRKGDREAQVFVRLRRHRAKQASQHALRPAP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Partition Ratios\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.1594749040788046,\n        \"min\": -9.644123796,\n        \"max\": 10.3719059,\n        \"num_unique_values\": 3274,\n        \"samples\": [\n          3.070218563,\n          -5.050498006,\n          -2.861898875\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_protbert.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "JrhQfILQV_8n",
        "outputId": "c0932303-c6a4-4e10-82a0-523e14d3d798"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Log Partition Ratios\n",
              "count           3275.000000\n",
              "mean              -0.380056\n",
              "std                3.159475\n",
              "min               -9.644124\n",
              "25%               -2.604476\n",
              "50%               -0.432838\n",
              "75%                1.829648\n",
              "max               10.371906"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ed4c6c9-c73b-4a1f-986b-e6abb923a760\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Partition Ratios</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3275.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-0.380056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.159475</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-9.644124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-2.604476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-0.432838</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.829648</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10.371906</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ed4c6c9-c73b-4a1f-986b-e6abb923a760')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ed4c6c9-c73b-4a1f-986b-e6abb923a760 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ed4c6c9-c73b-4a1f-986b-e6abb923a760');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-79e14e39-d03b-4791-b5a8-d6e053ed9343\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79e14e39-d03b-4791-b5a8-d6e053ed9343')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-79e14e39-d03b-4791-b5a8-d6e053ed9343 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dataset_protbert\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Log Partition Ratios\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1157.7847999174692,\n        \"min\": -9.644123796,\n        \"max\": 3275.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.3800559806680916,\n          -0.43283836,\n          3275.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Select only the protein sequences that have a partition ratio of > 2 or < -2 for classification\n",
        "def assign_labels(pr):\n",
        "  if pr > 2.0:\n",
        "    return 1\n",
        "  elif pr < -2.0:\n",
        "    return 0\n",
        "  else:\n",
        "    return -1\n",
        "\n",
        "dataset_protbert['Enrichment Label'] = dataset_protbert['Log Partition Ratios'].apply(assign_labels)\n",
        "\n",
        "# Drop the columns that contain Enrichment Label of -1\n",
        "dataset_protbert_filtered = dataset_protbert[dataset_protbert['Enrichment Label'] != -1]\n",
        "\n",
        "dataset_protbert_filtered.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "KIyWvbVIrujE",
        "outputId": "84a218e4-cb16-407d-89c8-683c87b4e5d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Uniprot ID                                      Full Sequence  \\\n",
              "0     Q8WUM0  MFPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPLGSAVSSP...   \n",
              "1     P62917  MGRVIRGQRKGAGSVFRAHVKHRKGAARLRAVDFAERHGYIKGIVK...   \n",
              "2     Q8NFH3  MEEIYAKFVSQKISKTRWRPLPPGSLQTAETFATGSWDNEENYISL...   \n",
              "3     Q9NVP1  MSHLPMKLLRKKIEKRNLKLRQRNLKFQGASNLTLSETQNGDVSEE...   \n",
              "4     Q8N7H5  MAPTIQTQAQREDGHRPNSHRTLPERSGVVCRVKYCNSLPDIPFDP...   \n",
              "5     Q8WUA4  MDTCGVGYVALGEAGPVGNMTVVDSPGQEVLNQLDVKTSSEMTSAE...   \n",
              "6     Q8WVC0  MADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSESD...   \n",
              "7     P55884  MQDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAA...   \n",
              "8     Q9Y5Q8  MAAEAADLGLGAAVPVELRRERRMVCVEYPGVVRDVAKMLPTLGGE...   \n",
              "9     Q13347  MKPILLQGHERSITQIKYNREGDLLFTVAKDPIVNVWYSVNGERLG...   \n",
              "\n",
              "   Log Partition Ratios  Enrichment Label  \n",
              "0             10.371906                 1  \n",
              "1              9.667730                 1  \n",
              "2              9.605071                 1  \n",
              "3              9.565771                 1  \n",
              "4              9.189393                 1  \n",
              "5              9.121233                 1  \n",
              "6              9.007168                 1  \n",
              "7              8.627768                 1  \n",
              "8              7.997080                 1  \n",
              "9              7.988217                 1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-efc8a0ab-d386-4dff-970c-7057e296fde3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Uniprot ID</th>\n",
              "      <th>Full Sequence</th>\n",
              "      <th>Log Partition Ratios</th>\n",
              "      <th>Enrichment Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Q8WUM0</td>\n",
              "      <td>MFPAAPSPRTPGTGSRRGPLAGLGPGSTPRTASRKGLPLGSAVSSP...</td>\n",
              "      <td>10.371906</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>P62917</td>\n",
              "      <td>MGRVIRGQRKGAGSVFRAHVKHRKGAARLRAVDFAERHGYIKGIVK...</td>\n",
              "      <td>9.667730</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Q8NFH3</td>\n",
              "      <td>MEEIYAKFVSQKISKTRWRPLPPGSLQTAETFATGSWDNEENYISL...</td>\n",
              "      <td>9.605071</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Q9NVP1</td>\n",
              "      <td>MSHLPMKLLRKKIEKRNLKLRQRNLKFQGASNLTLSETQNGDVSEE...</td>\n",
              "      <td>9.565771</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Q8N7H5</td>\n",
              "      <td>MAPTIQTQAQREDGHRPNSHRTLPERSGVVCRVKYCNSLPDIPFDP...</td>\n",
              "      <td>9.189393</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Q8WUA4</td>\n",
              "      <td>MDTCGVGYVALGEAGPVGNMTVVDSPGQEVLNQLDVKTSSEMTSAE...</td>\n",
              "      <td>9.121233</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Q8WVC0</td>\n",
              "      <td>MADMEDLFGSDADSEAERKDSDSGSDSDSDQENAASGSNASGSESD...</td>\n",
              "      <td>9.007168</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>P55884</td>\n",
              "      <td>MQDAENVAVPEAAEERAEPGQQQPAAEPPPAEGLLRPAGPGAPEAA...</td>\n",
              "      <td>8.627768</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Q9Y5Q8</td>\n",
              "      <td>MAAEAADLGLGAAVPVELRRERRMVCVEYPGVVRDVAKMLPTLGGE...</td>\n",
              "      <td>7.997080</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Q13347</td>\n",
              "      <td>MKPILLQGHERSITQIKYNREGDLLFTVAKDPIVNVWYSVNGERLG...</td>\n",
              "      <td>7.988217</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efc8a0ab-d386-4dff-970c-7057e296fde3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-efc8a0ab-d386-4dff-970c-7057e296fde3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-efc8a0ab-d386-4dff-970c-7057e296fde3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b6712cb2-afce-412c-824d-846af65a4a0c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b6712cb2-afce-412c-824d-846af65a4a0c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b6712cb2-afce-412c-824d-846af65a4a0c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset_protbert_filtered",
              "summary": "{\n  \"name\": \"dataset_protbert_filtered\",\n  \"rows\": 1792,\n  \"fields\": [\n    {\n      \"column\": \"Uniprot ID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1792,\n        \"samples\": [\n          \"Q92900\",\n          \"Q99996\",\n          \"P16989\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Full Sequence\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1792,\n        \"samples\": [\n          \"MSVEAYGPSSQTLTFLDTEEAELLGADTQGSEFEFTDFTLPSQTQTPPGGPGGPGGGGAGGPGGAGAGAAAGQLDAQVGPEGILQNGAVDDSVAKTSQLLAELNFEEDEEDTYYTKDLPIHACSYCGIHDPACVVYCNTSKKWFCNGRGNTSGSHIVNHLVRAKCKEVTLHKDGPLGETVLECYNCGCRNVFLLGFIPAKADSVVVLLCRQPCASQSSLKDINWDSSQWQPLIQDRCFLSWLVKIPSEQEQLRARQITAQQINKLEELWKENPSATLEDLEKPGVDEEPQHVLLRYEDAYQYQNIFGPLVKLEADYDKKLKESQTQDNITVRWDLGLNKKRIAYFTLPKTDSGNEDLVIIWLRDMRLMQGDEICLRYKGDLAPLWKGIGHVIKVPDNYGDEIAIELRSSVGAPVEVTHNFQVDFVWKSTSFDRMQSALKTFAVDETSVSGYIYHKLLGHEVEDVIIKCQLPKRFTAQGLPDLNHSQVYAVKTVLQRPLSLIQGPPGTGKTVTSATIVYHLARQGNGPVLVCAPSNIAVDQLTEKIHQTGLKVVRLCAKSREAIDSPVSFLALHNQIRNMDSMPELQKLQQLKDETGELSSADEKRYRALKRTAERELLMNADVICCTCVGAGDPRLAKMQFRSILIDESTQATEPECMVPVVLGAKQLILVGDHCQLGPVVMCKKAAKAGLSQSLFERLVVLGIRPIRLQVQYRMHPALSAFPSNIFYEGSLQNGVTAADRVKKGFDFQWPQPDKPMFFYVTQGQEEIASSGTSYLNRTEAANVEKITTKLLKAGAKPDQIGIITPYEGQRSYLVQYMQFSGSLHTKLYQEVEIASVDAFQGREKDFIILSCVRANEHQGIGFLNDPRRLNVALTRARYGVIIVGNPKALSKQPLWNHLLNYYKEQKVLVEGPLNNLRESLMQFSKPRKLVNTINPGARFMTTAMYDAREAIIPGSVYDRSSQGRPSSMYFQTHDQIGMISAGPSHVAAMNIPIPFNLVMPPMPPPGYFGQANGPAAGRGTPKGKTGRGGRQKNRFGLPGPSQTNLPNSQASQDVASQPFSQGALTQGYISMSQPSQMSQPGLSQPELSQDSYLGDEFKSQIDVALSQDSTYQGERAYQHGGVTGLSQY\",\n          \"MEDEERQKKLEAGKAKLAQFRQRKAQSDGQSPSKKQKKKRKTSSSKHDVSAHHDLNIDQSQCNEMYINSSQRVESTVIPESTIMRTLHSGEITSHEQGFSVELESEISTTADDCSSEVNGCSFVMRTGKPTNLLREEEFGVDDSYSEQGAQDSPTHLEMMESELAGKQHEIEELNRELEEMRVTYGTEGLQQLQEFEAAIKQRDGIITQLTANLQQARREKDETMREFLELTEQSQKLQIQFQQLQASETLRNSTHSSTAADLLQAKQQILTHQQQLEEQDHLLEDYQKKKEDFTMQISFLQEKIKVYEMEQDKKVENSNKEEIQEKETIIEELNTKIIEEEKKTLELKDKLTTADKLLGELQEQIVQKNQEIKNMKLELTNSKQKERQSSEEIKQLMGTVEELQKRNHKDSQFETDIVQRMEQETQRKLEQLRAELDEMYGQQIVQMKQELIRQHMAQMEEMKTRHKGEMENALRSYSNITVNEDQIKLMNVAINELNIKLQDTNSQKEKLKEELGLILEEKCALQRQLEDLVEELSFSREQIQRARQTIAEQESKLNEAHKSLSTVEDLKAEIVSASESRKELELKHEAEVTNYKIKLEMLEKEKNAVLDRMAESQEAELERLRTQLLFSHEEELSKLKEDLEIEHRINIEKLKDNLGIHYKQQIDGLQNEMSQKIETMQFEKDNLITKQNQLILEISKLKDLQQSLVNSKSEEMTLQINELQKEIEILRQEEKEKGTLEQEVQELQLKTELLEKQMKEKENDLQEKFAQLEAENSILKDEKKTLEDMLKIHTPVSQEERLIFLDSIKSKSKDSVWEKEIEILIEENEDLKQQCIQLNEEIEKQRNTFSFAEKNFEVNYQELQEEYACLLKVKDDLEDSKNKQELEYKSKLKALNEELHLQRINPTTVKMKSSVFDEDKTFVAETLEMGEVVEKDTTELMEKLEVTKREKLELSQRLSDLSEQLKQKHGEISFLNEEVKSLKQEKEQVSLRCRELEIIINHNRAENVQSCDTQVSSLLDGVVTMTSRGAEGSVSKVNKSFGEESKIMVEDKVSFENMTVGEESKQEQLILDHLPSVTKESSLRATQPSENDKLQKELNVLKSEQNDLRLQMEAQRICLSLVYSTHVDQVREYMENEKDKALCSLKEELIFAQEEKIKELQKIHQLELQTMKTQETGDEGKPLHLLIGKLQKAVSEECSYFLQTLCSVLGEYYTPALKCEVNAEDKENSGDYISENEDPELQDYRYEVQDFQENMHTLLNKVTEEYNKLLVLQTRLSKIWGQQTDGMKLEFGEENLPKEETEFLSIHSQMTNLEDIDVNHKSKLSSLQDLEKTKLEEQVQELESLISSLQQQLKETEQNYEAEIHCLQKRLQAVSESTVPPSLPVDSVVITESDAQRTMYPGSCVKKNIDGTIEFSGEFGVKEETNIVKLLEKQYQEQLEEEVAKVIVSMSIAFAQQTELSRISGGKENTASSKQAHAVCQQEQHYFNEMKLSQDQIGFQTFETVDVKFKEEFKPLSKELGEHGKEILLSNSDPHDIPESKDCVLTISEEMFSKDKTFIVRQSIHDEISVSSMDASRQLMLNEEQLEDMRQELVRQYQEHQQATELLRQAHMRQMERQREDQEQLQEEIKRLNRQLAQRSSIDNENLVSERERVLLEELEALKQLSLAGREKLCCELRNSSTQTQNGNENQGEVEEQTFKEKELDRKPEDVPPEILSNERYALQKANNRLLKILLEVVKTTAAVEETIGRHVLGILDRSSKSQSSASLIWRSEAEASVKSCVHEEHTRVTDESIPSYSGSDMPRNDINMWSKVTEEGTELSQRLVRSGFAGTEIDPENEELMLNISSRLQAAVEKLLEAISETSSQLEHAKVTQTELMRESFRQKQEATESLKCQEELRERLHEESRAREQLAVELSKAEGVIDGYADEKTLFERQIQEKTDIIDRLEQELLCASNRLQELEAEQQQIQEERELLSRQKEAMKAEAGPVEQQLLQETEKLMKEKLEVQCQAEKVRDDLQKQVKALEIDVEEQVSRFIELEQEKNTELMDLRQQNQALEKQLEKMRKFLDEQAIDREHERDVFQQEIQKLEQQLKVVPRFQPISEHQTREVEQLANHLKEKTDKCSELLLSKEQLQRDIQERNEEIEKLEFRVRELEQALLVSADTFQKVEDRKHFGAVEAKPELSLEVQLQAERDAIDRKEKEITNLEEQLEQFREELENKNEEVQQLHMQLEIQKKESTTRLQELEQENKLFKDDMEKLGLAIKESDAMSTQDQHVLFGKFAQIIQEKEVEIDQLNEQVTKLQQQLKITTDNKVIEEKNELIRDLETQIECLMSDQECVKRNREEEIEQLNEVIEKLQQELANIGQKTSMNAHSLSEEADSLKHQLDVVIAEKLALEQQVETANEEMTFMKNVLKETNFKMNQLTQELFSLKRERESVEKIQSIPENSVNVAIDHLSKDKPELEVVLTEDALKSLENQTYFKSFEENGKGSIINLETRLLQLESTVSAKDLELTQCYKQIKDMQEQGQFETEMLQKKIVNLQKIVEEKVAAALVSQIQLEAVQEYAKFCQDNQTISSEPERTNIQNLNQLREDELGSDISALTLRISELESQVVEMHTSLILEKEQVEIAEKNVLEKEKKLLELQKLLEGNEKKQREKEKKRSPQDVEVLKTTTELFHSNEESGFFNELEALRAESVATKAELASYKEKAEKLQEELLVKETNMTSLQKDLSQVRDHLAEAKEKLSILEKEDETEVQESKKACMFEPLPIKLSKSIASQTDGTLKISSSNQTPQILVKNAGIQINLQSECSSEEVTEIISQFTEKIEKMQELHAAEILDMESRHISETETLKREHYVAVQLLKEECGTLKAVIQCLRSKEGSSIPELAHSDAYQTREICSSDSGSDWGQGIYLTHSQGFDIASEGRGEESESATDSFPKKIKGLLRAVHNEGMQVLSLTESPYSDGEDHSIQQVSEPWLEERKAYINTISSLKDLITKMQLQREAEVYDSSQSHESFSDWRGELLLALQQVFLEERSVLLAAFRTELTALGTTDAVGLLNCLEQRIQEQGVEYQAAMECLQKADRRSLLSEIQALHAQMNGRKITLKREQESEKPSQELLEYNIQQKQSQMLEMQVELSSMKDRATELQEQLSSEKMVVAELKSELAQTKLELETTLKAQHKHLKELEAFRLEVKDKTDEVHLLNDTLASEQKKSRELQWALEKEKAKLGRSEERDKEELEDLKFSLESQKQRNLQLNLLLEQQKQLLNESQQKIESQRMLYDAQLSEEQGRNLELQVLLESEKVRIREMSSTLDRERELHAQLQSSDGTGQSRPPLPSEDLLKELQKQLEEKHSRIVELLNETEKYKLDSLQTRQQMEKDRQVHRKTLQTEQEANTEGQKKMHELQSKVEDLQRQLEEKRQQVYKLDLEGQRLQGIMQEFQKQELEREEKRESRRILYQNLNEPTTWSLTSDRTRNWVLQQKIEGETKESNYAKLIEMNGGGTGCNHELEMIRQKLQCVASKLQVLPQKASERLQFETADDEDFIWVQENIDEIILQLQKLTGQQGEEPSLVSPSTSCGSLTERLLRQNAELTGHISQLTEEKNDLRNMVMKLEEQIRWYRQTGAGRDNSSRFSLNGGANIEAIIASEKEVWNREKLTLQKSLKRAEAEVYKLKAELRNDSLLQTLSPDSEHVTLKRIYGKYLRAESFRKALIYQKKYLLLLLGGFQECEDATLALLARMGGQPAFTDLEVITNRPKGFTRFRSAVRVSIAISRMKFLVRRWHRVTGSVSININRDGFGLNQGAEKTDSFYHSSGGLELYGEPRHTTYRSRSDLDYIRSPLPFQNRYPGTPADFNPGSLACSQLQNYDPDRALTDYITRLEALQRRLGTIQSGSTTQFHAGMRR\",\n          \"MSEAGEATTTTTTTLPQAPTEAAAAAPQDPAPKSPVGSGAPQAAAPAPAAHVAGNPGGDAAPAATGTAAAASLATAAGSEDAEKKVLATKVLGTVKWFNVRNGYGFINRNDTKEDVFVHQTAIKKNNPRKYLRSVGDGETVEFDVVEGEKGAEAANVTGPDGVPVEGSRYAADRRRYRRGYYGRRRGPPRNYAGEEEEEGSGSSEGFDPPATDRQFSGARNQLRRPQYRPQYRQRRFPPYHVGQTFDRRSRVLPHPNRIQAGEIGEMKDGVPEGAQLQGPVHRNPTYRPRYRSRGPPRPRPAPAVGEAEDKENQQATSGPNQPSVRRGYRRPYNYRRRPRPPNAPSQDGKEAKAGEAPTENPAPPTQQSSAE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Partition Ratios\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.131037686864971,\n        \"min\": -9.644123796,\n        \"max\": 10.3719059,\n        \"num_unique_values\": 1792,\n        \"samples\": [\n          2.536732854,\n          4.427623834,\n          -2.931965405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Enrichment Label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class SeqDataset(torch.utils.data.Dataset):\n",
        "  '''This class is used to create a dataset for the model'''\n",
        "  def __init__(self, encodings, labels):\n",
        "      self.encodings = encodings\n",
        "      self.labels = labels\n",
        "\n",
        "  def __getitem__(self, idx):\n",
        "      item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}\n",
        "      item['labels'] = torch.tensor(self.labels[idx])\n",
        "      return item\n",
        "\n",
        "  def __len__(self):\n",
        "      return len(self.labels)"
      ],
      "metadata": {
        "id": "-Gadtq_Jo1WD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import AutoTokenizer\n",
        "\n",
        "X = list(dataset_protbert_filtered['Full Sequence'].values)\n",
        "y = list(dataset_protbert_filtered['Enrichment Label'].values)\n",
        "\n",
        "\n",
        "# Do a test:train 20:80 split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "        X, y, test_size=0.2, train_size=0.8)\n",
        "# Divide the train set into a validation:train 10:90 split\n",
        "X_train, X_val, y_train, y_val = train_test_split(\n",
        "        X_train, y_train, test_size=0.2, train_size=0.8)\n",
        "\n",
        "sequence_len_df = dataset_protbert_filtered['Full Sequence'].apply(len)\n",
        "max_len = int(np.median(np.quantile(sequence_len_df, 0.99)))\n",
        "\n",
        "#Build Dataset\n",
        "train_data = SeqDataset(X_train, y_train) # fill in code here\n",
        "val_data = SeqDataset(X_val, y_val) # fill in code here\n",
        "test_data = SeqDataset(X_test, y_test) # fill in code here\n",
        "\n",
        "# Build DataLoader\n",
        "batch_size = 16\n",
        "train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)\n",
        "val_loader = DataLoader(val_data, batch_size=batch_size, shuffle=True)\n",
        "test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=True)\n",
        "\n",
        "tokenizer = AutoTokenizer.from_pretrained(\"facebook/esm2_t6_8M_UR50D\", do_lower_case=False, model_max_length= max_len)\n",
        "train_encodings = tokenizer(X_train, truncation=True, padding=True, return_tensors=\"pt\")\n",
        "dev_encodings = tokenizer(X_val, truncation=True, padding=True, return_tensors=\"pt\")\n",
        "test_encodings = tokenizer(X_test, truncation=True, padding=True, return_tensors=\"pt\")\n",
        "\n",
        "train_dataset = SeqDataset(train_encodings, y_train)\n",
        "dev_dataset = SeqDataset(dev_encodings, y_val)\n",
        "test_dataset = SeqDataset(test_encodings, y_test)"
      ],
      "metadata": {
        "id": "jO58f1rArCGx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(X_train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dD2XvE8vuDlv",
        "outputId": "f232dd96-c747-4ef2-9c90-bbc805281498"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1146\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import AutoModelForSequenceClassification, TrainingArguments, Trainer\n",
        "\n",
        "!pip install evaluate\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RCQzItPxq8-J",
        "outputId": "0d343f1f-0553-442a-e77f-52c29d6011f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: evaluate in /usr/local/lib/python3.10/dist-packages (0.4.1)\n",
            "Requirement already satisfied: datasets>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (2.18.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from evaluate) (1.25.2)\n",
            "Requirement already satisfied: dill in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.3.8)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from evaluate) (1.5.3)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.10/dist-packages (from evaluate) (4.66.2)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from evaluate) (3.4.1)\n",
            "Requirement already satisfied: multiprocess in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.70.16)\n",
            "Requirement already satisfied: fsspec[http]>=2021.05.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (2023.6.0)\n",
            "Requirement already satisfied: huggingface-hub>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.20.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from evaluate) (24.0)\n",
            "Requirement already satisfied: responses<0.19 in /usr/local/lib/python3.10/dist-packages (from evaluate) (0.18.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (3.13.3)\n",
            "Requirement already satisfied: pyarrow>=12.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (14.0.2)\n",
            "Requirement already satisfied: pyarrow-hotfix in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (0.6)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (3.9.3)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from datasets>=2.0.0->evaluate) (6.0.1)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.7.0->evaluate) (4.10.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->evaluate) (2024.2.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->evaluate) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->evaluate) (2023.4)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.3.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (23.2.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.4.1)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (6.0.5)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.9.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets>=2.0.0->evaluate) (4.0.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->evaluate) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install transformers[torch]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mr0uOKP1un-3",
        "outputId": "573ade19-c727-4437-8f1e-7d7ebb8a5b1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers[torch] in /usr/local/lib/python3.10/dist-packages (4.38.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (3.13.3)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.20.3)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (24.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (6.0.1)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2023.12.25)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.31.0)\n",
            "Requirement already satisfied: tokenizers<0.19,>=0.14 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.15.2)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (0.4.2)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (4.66.2)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from transformers[torch]) (2.2.1+cu121)\n",
            "Collecting accelerate>=0.21.0 (from transformers[torch])\n",
            "  Downloading accelerate-0.28.0-py3-none-any.whl (290 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m290.1/290.1 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate>=0.21.0->transformers[torch]) (5.9.5)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers[torch]) (2023.6.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers[torch]) (4.10.0)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (1.12)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (3.2.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (3.1.3)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m23.7/23.7 MB\u001b[0m \u001b[31m20.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-cuda-runtime-cu12==12.1.105 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m823.6/823.6 kB\u001b[0m \u001b[31m33.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-cuda-cupti-cu12==12.1.105 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m14.1/14.1 MB\u001b[0m \u001b[31m40.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-cudnn-cu12==8.9.2.26 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m731.7/731.7 MB\u001b[0m \u001b[31m979.7 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-cublas-cu12==12.1.3.1 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m410.6/410.6 MB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-cufft-cu12==11.0.2.54 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m121.6/121.6 MB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-curand-cu12==10.3.2.106 (from torch->transformers[torch])\n",
            "  Downloading nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.5/56.5 MB\u001b[0m \u001b[31m16.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-cusolver-cu12==11.4.5.107 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m124.2/124.2 MB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-cusparse-cu12==12.1.0.106 (from torch->transformers[torch])\n",
            "  Downloading nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m196.0/196.0 MB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-nccl-cu12==2.19.3 (from torch->transformers[torch])\n",
            "  Downloading nvidia_nccl_cu12-2.19.3-py3-none-manylinux1_x86_64.whl (166.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m166.0/166.0 MB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting nvidia-nvtx-cu12==12.1.105 (from torch->transformers[torch])\n",
            "  Downloading nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.1/99.1 kB\u001b[0m \u001b[31m11.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: triton==2.2.0 in /usr/local/lib/python3.10/dist-packages (from torch->transformers[torch]) (2.2.0)\n",
            "Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch->transformers[torch])\n",
            "  Downloading nvidia_nvjitlink_cu12-12.4.99-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m27.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers[torch]) (2024.2.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->transformers[torch]) (2.1.5)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->transformers[torch]) (1.3.0)\n",
            "Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, accelerate\n",
            "Successfully installed accelerate-0.28.0 nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.19.3 nvidia-nvjitlink-cu12-12.4.99 nvidia-nvtx-cu12-12.1.105\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! pip install accelerate -U\n",
        "\n",
        "import evaluate\n",
        "model = AutoModelForSequenceClassification.from_pretrained(\"facebook/esm2_t6_8M_UR50D\", num_labels=2)\n",
        "\n",
        "eps = 1\n",
        "bs = 16\n",
        "steps = len(train_dataset) // bs\n",
        "\n",
        "metric = evaluate.load('accuracy')\n",
        "def compute_acc(eval_pred):\n",
        "    '''This function is used to compute the accuracy of the model'''\n",
        "    predictions, labels = eval_pred\n",
        "    predictions = np.argmax(predictions, axis=1)\n",
        "    return metric.compute(predictions=predictions, references=labels)\n",
        "\n",
        "training_args = TrainingArguments(\n",
        "    output_dir='./results/training_results',            # output directory\n",
        "    num_train_epochs= eps,                              # total number of training epochs\n",
        "    per_device_train_batch_size= bs,                    # batch size per device during training\n",
        "    per_device_eval_batch_size= bs,                     # batch size for evaluation\n",
        "    warmup_steps= 500,                                  # number of warmup steps for learning rate scheduler\n",
        "    weight_decay= 0.01,                                 # strength of weight decay\n",
        "    logging_dir= './results/training_logs',             # directory for storing logs\n",
        "    logging_steps= steps,\n",
        "    load_best_model_at_end= True,                       # load the best model at the end of training\n",
        "    evaluation_strategy= 'epoch',\n",
        "    save_strategy = 'epoch'\n",
        ")\n",
        "\n",
        "trainer = Trainer(\n",
        "    model=model,                                        # the instantiated 🤗 Transformers model to be trained\n",
        "    args=training_args,                                 # training arguments, defined above\n",
        "    train_dataset=train_dataset,                        # training dataset\n",
        "    eval_dataset=dev_dataset,                           # evaluation dataset\n",
        "    compute_metrics = compute_acc,\n",
        "    tokenizer=tokenizer\n",
        ")\n",
        "\n",
        "# train function starts the training\n",
        "trainer.train()\n",
        "\n",
        "# evaluate function evaluates the model on the input dataset\n",
        "trainer.evaluate(test_dataset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6GZ4jy21t2XM",
        "outputId": "c26f3539-1755-464d-85a4-8726e4b697b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: accelerate in /usr/local/lib/python3.10/dist-packages (0.28.0)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from accelerate) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from accelerate) (24.0)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate) (5.9.5)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from accelerate) (6.0.1)\n",
            "Requirement already satisfied: torch>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from accelerate) (2.2.1+cu121)\n",
            "Requirement already satisfied: huggingface-hub in /usr/local/lib/python3.10/dist-packages (from accelerate) (0.20.3)\n",
            "Requirement already satisfied: safetensors>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from accelerate) (0.4.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.13.3)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (4.10.0)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (1.12)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.2.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.1.3)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2023.6.0)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (8.9.2.26)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.3.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (11.0.2.54)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (10.3.2.106)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (11.4.5.107)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.0.106)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2.19.3)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: triton==2.2.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2.2.0)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch>=1.10.0->accelerate) (12.4.99)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub->accelerate) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub->accelerate) (4.66.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.10.0->accelerate) (2.1.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (2024.2.2)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.10.0->accelerate) (1.3.0)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of EsmForSequenceClassification were not initialized from the model checkpoint at facebook/esm2_t6_8M_UR50D and are newly initialized: ['classifier.dense.bias', 'classifier.dense.weight', 'classifier.out_proj.bias', 'classifier.out_proj.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ImportError",
          "evalue": "Using the `Trainer` with `PyTorch` requires `accelerate>=0.21.0`: Please run `pip install transformers[torch]` or `pip install accelerate -U`",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-76-b5c4df1594b2>\u001b[0m in \u001b[0;36m<cell line: 17>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreferences\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m training_args = TrainingArguments(\n\u001b[0m\u001b[1;32m     18\u001b[0m     \u001b[0moutput_dir\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'./results/training_results'\u001b[0m\u001b[0;34m,\u001b[0m            \u001b[0;31m# output directory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mnum_train_epochs\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0meps\u001b[0m\u001b[0;34m,\u001b[0m                              \u001b[0;31m# total number of training epochs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/training_args.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, output_dir, overwrite_output_dir, do_train, do_eval, do_predict, evaluation_strategy, prediction_loss_only, per_device_train_batch_size, per_device_eval_batch_size, per_gpu_train_batch_size, per_gpu_eval_batch_size, gradient_accumulation_steps, eval_accumulation_steps, eval_delay, learning_rate, weight_decay, adam_beta1, adam_beta2, adam_epsilon, max_grad_norm, num_train_epochs, max_steps, lr_scheduler_type, lr_scheduler_kwargs, warmup_ratio, warmup_steps, log_level, log_level_replica, log_on_each_node, logging_dir, logging_strategy, logging_first_step, logging_steps, logging_nan_inf_filter, save_strategy, save_steps, save_total_limit, save_safetensors, save_on_each_node, save_only_model, no_cuda, use_cpu, use_mps_device, seed, data_seed, jit_mode_eval, use_ipex, bf16, fp16, fp16_opt_level, half_precision_backend, bf16_full_eval, fp16_full_eval, tf32, local_rank, ddp_backend, tpu_num_cores, tpu_metrics_debug, debug, dataloader_drop_last, eval_steps, dataloader_num_workers, dataloader_prefetch_factor, past_index, run_name, disable_tqdm, remove_unused_columns, label_names, load_best_model_at_end, metric_for_best_model, greater_is_better, ignore_data_skip, fsdp, fsdp_min_num_params, fsdp_config, fsdp_transformer_layer_cls_to_wrap, accelerator_config, deepspeed, label_smoothing_factor, optim, optim_args, adafactor, group_by_length, length_column_name, report_to, ddp...\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/training_args.py\u001b[0m in \u001b[0;36m__post_init__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1526\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mframework\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pt\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1527\u001b[0m             \u001b[0;32mand\u001b[0m \u001b[0mis_torch_available\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1528\u001b[0;31m             \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"cuda\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1529\u001b[0m             \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"npu\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"xpu\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/training_args.py\u001b[0m in \u001b[0;36mdevice\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1993\u001b[0m         \"\"\"\n\u001b[1;32m   1994\u001b[0m         \u001b[0mrequires_backends\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"torch\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1995\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setup_devices\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1996\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1997\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/utils/generic.py\u001b[0m in \u001b[0;36m__get__\u001b[0;34m(self, obj, objtype)\u001b[0m\n\u001b[1;32m     54\u001b[0m         \u001b[0mcached\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcached\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m             \u001b[0mcached\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     57\u001b[0m             \u001b[0msetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcached\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcached\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/transformers/training_args.py\u001b[0m in \u001b[0;36m_setup_devices\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1903\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_sagemaker_mp_enabled\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1904\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_accelerate_available\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1905\u001b[0;31m                 raise ImportError(\n\u001b[0m\u001b[1;32m   1906\u001b[0m                     \u001b[0;34mf\"Using the `Trainer` with `PyTorch` requires `accelerate>={ACCELERATE_MIN_VERSION}`: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1907\u001b[0m                     \u001b[0;34m\"Please run `pip install transformers[torch]` or `pip install accelerate -U`\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mImportError\u001b[0m: Using the `Trainer` with `PyTorch` requires `accelerate>=0.21.0`: Please run `pip install transformers[torch]` or `pip install accelerate -U`",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from transformers import TFBertModel, BertTokenizer,BertConfig\n",
        "import re\n",
        "import numpy as np\n",
        "\n",
        "tokenizer = BertTokenizer.from_pretrained(\"Rostlab/prot_bert_bfd\", do_lower_case=False )\n",
        "\n",
        "model = TFBertModel.from_pretrained(\"Rostlab/prot_bert_bfd\", from_pt=True)\n",
        "\n",
        "sequences_Example = data_matrix_idr_features['IDR Sequence Combined'].values\n",
        "\n",
        "sequences_Example = [re.sub(r\"[UZOB]\", \"X\", sequence) for sequence in sequences_Example]\n",
        "\n",
        "ids = tokenizer.batch_encode_plus(sequences_Example, add_special_tokens=True, padding=True, return_tensors=\"tf\")\n",
        "\n",
        "input_ids = ids['input_ids']\n",
        "attention_mask = ids['attention_mask']\n",
        "\n",
        "embedding = model(input_ids)[0]\n",
        "\n",
        "embedding = np.asarray(embedding)\n",
        "\n",
        "attention_mask = np.asarray(attention_mask)\n",
        "\n",
        "features = []\n",
        "for seq_num in range(len(embedding)):\n",
        "  print(seq_num)\n",
        "  seq_len = (attention_mask[seq_num] == 1).sum()\n",
        "  seq_emd = embedding[seq_num][1:seq_len-1]\n",
        "  features.append(seq_emd)\n",
        "\n",
        "print(features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9jQzRyAtwhrm",
        "outputId": "62420138-0335-4689-82f4-12b2461d1754"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFBertModel: ['cls.predictions.decoder.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.weight', 'cls.predictions.bias', 'cls.predictions.decoder.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias']\n",
            "- This IS expected if you are initializing TFBertModel from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing TFBertModel from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\n",
            "All the weights of TFBertModel were initialized from the PyTorch model.\n",
            "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n",
            "11\n",
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "16\n",
            "17\n",
            "18\n",
            "19\n",
            "20\n",
            "21\n",
            "22\n",
            "23\n",
            "24\n",
            "25\n",
            "26\n",
            "27\n",
            "28\n",
            "29\n",
            "30\n",
            "31\n",
            "32\n",
            "33\n",
            "34\n",
            "35\n",
            "36\n",
            "37\n",
            "38\n",
            "39\n",
            "40\n",
            "41\n",
            "42\n",
            "43\n",
            "44\n",
            "45\n",
            "46\n",
            "47\n",
            "48\n",
            "49\n",
            "50\n",
            "51\n",
            "52\n",
            "53\n",
            "54\n",
            "55\n",
            "56\n",
            "57\n",
            "58\n",
            "59\n",
            "60\n",
            "61\n",
            "62\n",
            "63\n",
            "64\n",
            "65\n",
            "66\n",
            "67\n",
            "68\n",
            "69\n",
            "70\n",
            "71\n",
            "72\n",
            "73\n",
            "74\n",
            "75\n",
            "76\n",
            "77\n",
            "78\n",
            "79\n",
            "80\n",
            "81\n",
            "82\n",
            "83\n",
            "84\n",
            "85\n",
            "86\n",
            "87\n",
            "88\n",
            "89\n",
            "90\n",
            "91\n",
            "92\n",
            "93\n",
            "94\n",
            "95\n",
            "96\n",
            "97\n",
            "98\n",
            "99\n",
            "100\n",
            "101\n",
            "102\n",
            "103\n",
            "104\n",
            "105\n",
            "106\n",
            "107\n",
            "108\n",
            "109\n",
            "110\n",
            "111\n",
            "112\n",
            "113\n",
            "114\n",
            "115\n",
            "116\n",
            "117\n",
            "118\n",
            "119\n",
            "120\n",
            "121\n",
            "122\n",
            "123\n",
            "124\n",
            "125\n",
            "126\n",
            "127\n",
            "128\n",
            "129\n",
            "130\n",
            "131\n",
            "132\n",
            "133\n",
            "134\n",
            "135\n",
            "136\n",
            "137\n",
            "138\n",
            "139\n",
            "140\n",
            "141\n",
            "142\n",
            "143\n",
            "144\n",
            "145\n",
            "146\n",
            "147\n",
            "148\n",
            "149\n",
            "150\n",
            "151\n",
            "152\n",
            "153\n",
            "154\n",
            "155\n",
            "156\n",
            "157\n",
            "158\n",
            "159\n",
            "160\n",
            "161\n",
            "162\n",
            "163\n",
            "164\n",
            "165\n",
            "166\n",
            "167\n",
            "168\n",
            "169\n",
            "170\n",
            "171\n",
            "172\n",
            "173\n",
            "174\n",
            "175\n",
            "176\n",
            "177\n",
            "178\n",
            "179\n",
            "180\n",
            "181\n",
            "182\n",
            "183\n",
            "184\n",
            "185\n",
            "186\n",
            "187\n",
            "188\n",
            "189\n",
            "190\n",
            "191\n",
            "192\n",
            "193\n",
            "194\n",
            "195\n",
            "196\n",
            "197\n",
            "198\n",
            "199\n",
            "200\n",
            "201\n",
            "202\n",
            "203\n",
            "204\n",
            "205\n",
            "206\n",
            "207\n",
            "208\n",
            "209\n",
            "210\n",
            "211\n",
            "212\n",
            "213\n",
            "214\n",
            "215\n",
            "216\n",
            "217\n",
            "218\n",
            "219\n",
            "220\n",
            "221\n",
            "222\n",
            "223\n",
            "224\n",
            "225\n",
            "226\n",
            "227\n",
            "228\n",
            "229\n",
            "230\n",
            "231\n",
            "232\n",
            "233\n",
            "234\n",
            "235\n",
            "236\n",
            "237\n",
            "238\n",
            "239\n",
            "240\n",
            "241\n",
            "242\n",
            "243\n",
            "244\n",
            "245\n",
            "246\n",
            "247\n",
            "248\n",
            "249\n",
            "250\n",
            "251\n",
            "252\n",
            "253\n",
            "254\n",
            "255\n",
            "256\n",
            "257\n",
            "258\n",
            "259\n",
            "260\n",
            "261\n",
            "262\n",
            "263\n",
            "264\n",
            "265\n",
            "266\n",
            "267\n",
            "268\n",
            "269\n",
            "270\n",
            "271\n",
            "272\n",
            "273\n",
            "274\n",
            "275\n",
            "276\n",
            "277\n",
            "278\n",
            "279\n",
            "280\n",
            "281\n",
            "282\n",
            "283\n",
            "284\n",
            "285\n",
            "286\n",
            "287\n",
            "288\n",
            "289\n",
            "290\n",
            "291\n",
            "292\n",
            "293\n",
            "294\n",
            "295\n",
            "296\n",
            "297\n",
            "298\n",
            "299\n",
            "300\n",
            "301\n",
            "302\n",
            "303\n",
            "304\n",
            "305\n",
            "306\n",
            "307\n",
            "308\n",
            "309\n",
            "310\n",
            "311\n",
            "312\n",
            "313\n",
            "314\n",
            "315\n",
            "316\n",
            "317\n",
            "318\n",
            "319\n",
            "320\n",
            "321\n",
            "322\n",
            "323\n",
            "324\n",
            "325\n",
            "326\n",
            "327\n",
            "328\n",
            "329\n",
            "330\n",
            "331\n",
            "332\n",
            "333\n",
            "334\n",
            "335\n",
            "336\n",
            "337\n",
            "338\n",
            "339\n",
            "340\n",
            "341\n",
            "342\n",
            "343\n",
            "344\n",
            "345\n",
            "346\n",
            "347\n",
            "348\n",
            "349\n",
            "350\n",
            "351\n",
            "352\n",
            "353\n",
            "354\n",
            "355\n",
            "356\n",
            "357\n",
            "358\n",
            "359\n",
            "360\n",
            "361\n",
            "362\n",
            "363\n",
            "364\n",
            "365\n",
            "366\n",
            "367\n",
            "368\n",
            "369\n",
            "370\n",
            "371\n",
            "372\n",
            "373\n",
            "374\n",
            "375\n",
            "376\n",
            "377\n",
            "378\n",
            "379\n",
            "380\n",
            "381\n",
            "382\n",
            "383\n",
            "384\n",
            "385\n",
            "386\n",
            "387\n",
            "388\n",
            "389\n",
            "390\n",
            "391\n",
            "392\n",
            "393\n",
            "394\n",
            "395\n",
            "396\n",
            "397\n",
            "398\n",
            "399\n",
            "400\n",
            "401\n",
            "402\n",
            "403\n",
            "404\n",
            "405\n",
            "406\n",
            "407\n",
            "408\n",
            "409\n",
            "410\n",
            "411\n",
            "412\n",
            "413\n",
            "414\n",
            "415\n",
            "416\n",
            "417\n",
            "418\n",
            "419\n",
            "420\n",
            "421\n",
            "422\n",
            "423\n",
            "424\n",
            "425\n",
            "426\n",
            "427\n",
            "428\n",
            "429\n",
            "430\n",
            "431\n",
            "432\n",
            "433\n",
            "434\n",
            "435\n",
            "436\n",
            "437\n",
            "438\n",
            "439\n",
            "440\n",
            "441\n",
            "442\n",
            "443\n",
            "444\n",
            "445\n",
            "446\n",
            "447\n",
            "448\n",
            "449\n",
            "450\n",
            "451\n",
            "452\n",
            "453\n",
            "454\n",
            "455\n",
            "456\n",
            "457\n",
            "458\n",
            "459\n",
            "460\n",
            "461\n",
            "462\n",
            "463\n",
            "464\n",
            "465\n",
            "466\n",
            "467\n",
            "468\n",
            "469\n",
            "470\n",
            "471\n",
            "472\n",
            "473\n",
            "474\n",
            "475\n",
            "476\n",
            "477\n",
            "478\n",
            "479\n",
            "480\n",
            "481\n",
            "482\n",
            "483\n",
            "484\n",
            "485\n",
            "486\n",
            "487\n",
            "488\n",
            "489\n",
            "490\n",
            "491\n",
            "492\n",
            "493\n",
            "494\n",
            "495\n",
            "496\n",
            "497\n",
            "498\n",
            "499\n",
            "500\n",
            "501\n",
            "502\n",
            "503\n",
            "504\n",
            "505\n",
            "506\n",
            "507\n",
            "508\n",
            "509\n",
            "510\n",
            "511\n",
            "512\n",
            "513\n",
            "514\n",
            "515\n",
            "516\n",
            "517\n",
            "518\n",
            "519\n",
            "520\n",
            "521\n",
            "522\n",
            "523\n",
            "524\n",
            "525\n",
            "526\n",
            "527\n",
            "528\n",
            "529\n",
            "530\n",
            "531\n",
            "532\n",
            "533\n",
            "534\n",
            "535\n",
            "536\n",
            "537\n",
            "538\n",
            "539\n",
            "540\n",
            "541\n",
            "542\n",
            "543\n",
            "544\n",
            "545\n",
            "546\n",
            "547\n",
            "548\n",
            "549\n",
            "550\n",
            "551\n",
            "552\n",
            "553\n",
            "554\n",
            "555\n",
            "556\n",
            "557\n",
            "558\n",
            "559\n",
            "560\n",
            "561\n",
            "562\n",
            "563\n",
            "564\n",
            "565\n",
            "566\n",
            "567\n",
            "568\n",
            "569\n",
            "570\n",
            "571\n",
            "572\n",
            "573\n",
            "574\n",
            "575\n",
            "576\n",
            "577\n",
            "578\n",
            "579\n",
            "580\n",
            "581\n",
            "582\n",
            "583\n",
            "584\n",
            "585\n",
            "586\n",
            "587\n",
            "588\n",
            "589\n",
            "590\n",
            "591\n",
            "592\n",
            "593\n",
            "594\n",
            "595\n",
            "596\n",
            "597\n",
            "598\n",
            "599\n",
            "600\n",
            "601\n",
            "602\n",
            "603\n",
            "604\n",
            "605\n",
            "606\n",
            "607\n",
            "608\n",
            "609\n",
            "610\n",
            "611\n",
            "612\n",
            "613\n",
            "614\n",
            "615\n",
            "616\n",
            "617\n",
            "618\n",
            "619\n",
            "620\n",
            "621\n",
            "622\n",
            "623\n",
            "624\n",
            "625\n",
            "626\n",
            "627\n",
            "628\n",
            "629\n",
            "630\n",
            "631\n",
            "632\n",
            "633\n",
            "634\n",
            "635\n",
            "636\n",
            "637\n",
            "638\n",
            "639\n",
            "640\n",
            "641\n",
            "642\n",
            "643\n",
            "644\n",
            "645\n",
            "646\n",
            "647\n",
            "648\n",
            "649\n",
            "650\n",
            "651\n",
            "652\n",
            "653\n",
            "654\n",
            "655\n",
            "656\n",
            "657\n",
            "658\n",
            "659\n",
            "660\n",
            "661\n",
            "662\n",
            "663\n",
            "664\n",
            "665\n",
            "666\n",
            "667\n",
            "668\n",
            "669\n",
            "670\n",
            "671\n",
            "672\n",
            "673\n",
            "674\n",
            "675\n",
            "676\n",
            "677\n",
            "678\n",
            "679\n",
            "680\n",
            "681\n",
            "682\n",
            "683\n",
            "684\n",
            "685\n",
            "686\n",
            "687\n",
            "688\n",
            "689\n",
            "690\n",
            "691\n",
            "692\n",
            "693\n",
            "694\n",
            "695\n",
            "696\n",
            "697\n",
            "698\n",
            "699\n",
            "700\n",
            "701\n",
            "702\n",
            "703\n",
            "704\n",
            "705\n",
            "706\n",
            "707\n",
            "708\n",
            "709\n",
            "710\n",
            "711\n",
            "712\n",
            "713\n",
            "714\n",
            "715\n",
            "716\n",
            "717\n",
            "718\n",
            "719\n",
            "720\n",
            "721\n",
            "722\n",
            "723\n",
            "724\n",
            "725\n",
            "726\n",
            "727\n",
            "728\n",
            "729\n",
            "730\n",
            "731\n",
            "732\n",
            "733\n",
            "734\n",
            "735\n",
            "736\n",
            "737\n",
            "738\n",
            "739\n",
            "740\n",
            "741\n",
            "742\n",
            "743\n",
            "744\n",
            "745\n",
            "746\n",
            "747\n",
            "748\n",
            "749\n",
            "750\n",
            "751\n",
            "752\n",
            "753\n",
            "754\n",
            "755\n",
            "756\n",
            "757\n",
            "758\n",
            "759\n",
            "760\n",
            "761\n",
            "762\n",
            "763\n",
            "764\n",
            "765\n",
            "766\n",
            "767\n",
            "768\n",
            "769\n",
            "770\n",
            "771\n",
            "772\n",
            "773\n",
            "774\n",
            "775\n",
            "776\n",
            "777\n",
            "778\n",
            "779\n",
            "780\n",
            "781\n",
            "782\n",
            "783\n",
            "784\n",
            "785\n",
            "786\n",
            "787\n",
            "788\n",
            "789\n",
            "790\n",
            "791\n",
            "792\n",
            "793\n",
            "794\n",
            "795\n",
            "796\n",
            "797\n",
            "798\n",
            "799\n",
            "800\n",
            "801\n",
            "802\n",
            "803\n",
            "804\n",
            "805\n",
            "806\n",
            "807\n",
            "808\n",
            "809\n",
            "810\n",
            "811\n",
            "812\n",
            "813\n",
            "814\n",
            "815\n",
            "816\n",
            "817\n",
            "818\n",
            "819\n",
            "820\n",
            "821\n",
            "822\n",
            "823\n",
            "824\n",
            "825\n",
            "826\n",
            "827\n",
            "828\n",
            "829\n",
            "830\n",
            "831\n",
            "832\n",
            "833\n",
            "834\n",
            "835\n",
            "836\n",
            "837\n",
            "838\n",
            "839\n",
            "840\n",
            "841\n",
            "842\n",
            "843\n",
            "844\n",
            "845\n",
            "846\n",
            "847\n",
            "848\n",
            "849\n",
            "850\n",
            "851\n",
            "852\n",
            "853\n",
            "854\n",
            "855\n",
            "856\n",
            "857\n",
            "858\n",
            "859\n",
            "860\n",
            "861\n",
            "862\n",
            "863\n",
            "864\n",
            "865\n",
            "866\n",
            "867\n",
            "868\n",
            "869\n",
            "870\n",
            "871\n",
            "872\n",
            "873\n",
            "874\n",
            "875\n",
            "876\n",
            "877\n",
            "878\n",
            "879\n",
            "880\n",
            "881\n",
            "882\n",
            "883\n",
            "884\n",
            "885\n",
            "886\n",
            "887\n",
            "888\n",
            "889\n",
            "890\n",
            "891\n",
            "892\n",
            "893\n",
            "894\n",
            "895\n",
            "896\n",
            "897\n",
            "898\n",
            "899\n",
            "900\n",
            "901\n",
            "902\n",
            "903\n",
            "904\n",
            "905\n",
            "906\n",
            "907\n",
            "908\n",
            "909\n",
            "910\n",
            "911\n",
            "912\n",
            "913\n",
            "914\n",
            "915\n",
            "916\n",
            "917\n",
            "918\n",
            "919\n",
            "920\n",
            "921\n",
            "922\n",
            "923\n",
            "924\n",
            "925\n",
            "926\n",
            "927\n",
            "928\n",
            "929\n",
            "930\n",
            "931\n",
            "932\n",
            "933\n",
            "934\n",
            "935\n",
            "936\n",
            "937\n",
            "938\n",
            "939\n",
            "940\n",
            "941\n",
            "942\n",
            "943\n",
            "944\n",
            "945\n",
            "946\n",
            "947\n",
            "948\n",
            "949\n",
            "950\n",
            "951\n",
            "952\n",
            "953\n",
            "954\n",
            "955\n",
            "956\n",
            "957\n",
            "958\n",
            "959\n",
            "960\n",
            "961\n",
            "962\n",
            "963\n",
            "964\n",
            "965\n",
            "966\n",
            "967\n",
            "968\n",
            "969\n",
            "970\n",
            "971\n",
            "972\n",
            "973\n",
            "974\n",
            "975\n",
            "976\n",
            "977\n",
            "978\n",
            "979\n",
            "980\n",
            "981\n",
            "982\n",
            "983\n",
            "984\n",
            "985\n",
            "986\n",
            "987\n",
            "988\n",
            "989\n",
            "990\n",
            "991\n",
            "992\n",
            "993\n",
            "994\n",
            "995\n",
            "996\n",
            "997\n",
            "998\n",
            "999\n",
            "1000\n",
            "1001\n",
            "1002\n",
            "1003\n",
            "1004\n",
            "1005\n",
            "1006\n",
            "1007\n",
            "1008\n",
            "1009\n",
            "1010\n",
            "1011\n",
            "1012\n",
            "1013\n",
            "1014\n",
            "1015\n",
            "1016\n",
            "1017\n",
            "1018\n",
            "1019\n",
            "1020\n",
            "1021\n",
            "1022\n",
            "1023\n",
            "1024\n",
            "1025\n",
            "1026\n",
            "1027\n",
            "1028\n",
            "1029\n",
            "1030\n",
            "1031\n",
            "1032\n",
            "1033\n",
            "1034\n",
            "1035\n",
            "1036\n",
            "1037\n",
            "1038\n",
            "1039\n",
            "1040\n",
            "1041\n",
            "1042\n",
            "1043\n",
            "1044\n",
            "1045\n",
            "1046\n",
            "1047\n",
            "1048\n",
            "1049\n",
            "1050\n",
            "1051\n",
            "1052\n",
            "1053\n",
            "1054\n",
            "1055\n",
            "1056\n",
            "1057\n",
            "1058\n",
            "1059\n",
            "1060\n",
            "1061\n",
            "1062\n",
            "1063\n",
            "1064\n",
            "1065\n",
            "1066\n",
            "1067\n",
            "1068\n",
            "1069\n",
            "1070\n",
            "1071\n",
            "1072\n",
            "1073\n",
            "1074\n",
            "1075\n",
            "1076\n",
            "1077\n",
            "1078\n",
            "1079\n",
            "1080\n",
            "1081\n",
            "1082\n",
            "1083\n",
            "1084\n",
            "1085\n",
            "1086\n",
            "1087\n",
            "1088\n",
            "1089\n",
            "1090\n",
            "1091\n",
            "1092\n",
            "1093\n",
            "1094\n",
            "1095\n",
            "1096\n",
            "1097\n",
            "1098\n",
            "1099\n",
            "1100\n",
            "1101\n",
            "1102\n",
            "1103\n",
            "1104\n",
            "1105\n",
            "1106\n",
            "1107\n",
            "1108\n",
            "1109\n",
            "1110\n",
            "1111\n",
            "1112\n",
            "1113\n",
            "1114\n",
            "1115\n",
            "1116\n",
            "1117\n",
            "1118\n",
            "1119\n",
            "1120\n",
            "1121\n",
            "1122\n",
            "1123\n",
            "1124\n",
            "1125\n",
            "1126\n",
            "1127\n",
            "1128\n",
            "1129\n",
            "1130\n",
            "1131\n",
            "1132\n",
            "1133\n",
            "1134\n",
            "1135\n",
            "1136\n",
            "1137\n",
            "1138\n",
            "1139\n",
            "1140\n",
            "1141\n",
            "1142\n",
            "1143\n",
            "1144\n",
            "1145\n",
            "1146\n",
            "1147\n",
            "1148\n",
            "1149\n",
            "1150\n",
            "1151\n",
            "1152\n",
            "1153\n",
            "1154\n",
            "1155\n",
            "1156\n",
            "1157\n",
            "1158\n",
            "1159\n",
            "1160\n",
            "1161\n",
            "1162\n",
            "1163\n",
            "1164\n",
            "1165\n",
            "1166\n",
            "1167\n",
            "1168\n",
            "1169\n",
            "1170\n",
            "1171\n",
            "1172\n",
            "1173\n",
            "1174\n",
            "1175\n",
            "1176\n",
            "1177\n",
            "1178\n",
            "1179\n",
            "1180\n",
            "1181\n",
            "1182\n",
            "1183\n",
            "1184\n",
            "1185\n",
            "1186\n",
            "1187\n",
            "1188\n",
            "1189\n",
            "1190\n",
            "1191\n",
            "1192\n",
            "1193\n",
            "1194\n",
            "1195\n",
            "1196\n",
            "1197\n",
            "1198\n",
            "1199\n",
            "1200\n",
            "1201\n",
            "1202\n",
            "1203\n",
            "1204\n",
            "1205\n",
            "1206\n",
            "1207\n",
            "1208\n",
            "1209\n",
            "1210\n",
            "1211\n",
            "1212\n",
            "1213\n",
            "1214\n",
            "1215\n",
            "1216\n",
            "1217\n",
            "1218\n",
            "1219\n",
            "1220\n",
            "1221\n",
            "1222\n",
            "1223\n",
            "1224\n",
            "1225\n",
            "1226\n",
            "1227\n",
            "1228\n",
            "1229\n",
            "1230\n",
            "1231\n",
            "1232\n",
            "1233\n",
            "1234\n",
            "1235\n",
            "1236\n",
            "1237\n",
            "1238\n",
            "1239\n",
            "1240\n",
            "1241\n",
            "1242\n",
            "1243\n",
            "1244\n",
            "1245\n",
            "1246\n",
            "1247\n",
            "1248\n",
            "1249\n",
            "1250\n",
            "1251\n",
            "1252\n",
            "1253\n",
            "1254\n",
            "1255\n",
            "1256\n",
            "1257\n",
            "1258\n",
            "1259\n",
            "1260\n",
            "1261\n",
            "1262\n",
            "1263\n",
            "1264\n",
            "1265\n",
            "1266\n",
            "1267\n",
            "1268\n",
            "1269\n",
            "1270\n",
            "1271\n",
            "1272\n",
            "1273\n",
            "1274\n",
            "1275\n",
            "1276\n",
            "1277\n",
            "1278\n",
            "1279\n",
            "1280\n",
            "1281\n",
            "1282\n",
            "1283\n",
            "1284\n",
            "1285\n",
            "1286\n",
            "1287\n",
            "1288\n",
            "1289\n",
            "1290\n",
            "1291\n",
            "1292\n",
            "1293\n",
            "1294\n",
            "1295\n",
            "1296\n",
            "1297\n",
            "1298\n",
            "1299\n",
            "1300\n",
            "1301\n",
            "1302\n",
            "1303\n",
            "1304\n",
            "1305\n",
            "1306\n",
            "1307\n",
            "1308\n",
            "1309\n",
            "1310\n",
            "1311\n",
            "1312\n",
            "1313\n",
            "1314\n",
            "1315\n",
            "1316\n",
            "1317\n",
            "1318\n",
            "1319\n",
            "1320\n",
            "1321\n",
            "1322\n",
            "1323\n",
            "1324\n",
            "1325\n",
            "1326\n",
            "1327\n",
            "1328\n",
            "1329\n",
            "1330\n",
            "1331\n",
            "1332\n",
            "1333\n",
            "1334\n",
            "1335\n",
            "1336\n",
            "1337\n",
            "1338\n",
            "1339\n",
            "1340\n",
            "1341\n",
            "1342\n",
            "1343\n",
            "1344\n",
            "1345\n",
            "1346\n",
            "1347\n",
            "1348\n",
            "1349\n",
            "1350\n",
            "1351\n",
            "1352\n",
            "1353\n",
            "1354\n",
            "1355\n",
            "1356\n",
            "1357\n",
            "1358\n",
            "1359\n",
            "1360\n",
            "1361\n",
            "1362\n",
            "1363\n",
            "1364\n",
            "1365\n",
            "1366\n",
            "1367\n",
            "1368\n",
            "1369\n",
            "1370\n",
            "1371\n",
            "1372\n",
            "1373\n",
            "1374\n",
            "1375\n",
            "1376\n",
            "1377\n",
            "1378\n",
            "1379\n",
            "1380\n",
            "1381\n",
            "1382\n",
            "1383\n",
            "1384\n",
            "1385\n",
            "1386\n",
            "1387\n",
            "1388\n",
            "1389\n",
            "1390\n",
            "1391\n",
            "1392\n",
            "1393\n",
            "1394\n",
            "1395\n",
            "1396\n",
            "1397\n",
            "1398\n",
            "1399\n",
            "1400\n",
            "1401\n",
            "1402\n",
            "1403\n",
            "1404\n",
            "1405\n",
            "1406\n",
            "1407\n",
            "1408\n",
            "1409\n",
            "1410\n",
            "1411\n",
            "1412\n",
            "1413\n",
            "1414\n",
            "1415\n",
            "1416\n",
            "1417\n",
            "1418\n",
            "1419\n",
            "1420\n",
            "1421\n",
            "1422\n",
            "1423\n",
            "1424\n",
            "1425\n",
            "1426\n",
            "1427\n",
            "1428\n",
            "1429\n",
            "1430\n",
            "1431\n",
            "1432\n",
            "1433\n",
            "1434\n",
            "1435\n",
            "1436\n",
            "1437\n",
            "1438\n",
            "1439\n",
            "1440\n",
            "1441\n",
            "1442\n",
            "1443\n",
            "1444\n",
            "1445\n",
            "1446\n",
            "1447\n",
            "1448\n",
            "1449\n",
            "1450\n",
            "1451\n",
            "1452\n",
            "1453\n",
            "1454\n",
            "1455\n",
            "1456\n",
            "1457\n",
            "1458\n",
            "1459\n",
            "1460\n",
            "1461\n",
            "1462\n",
            "1463\n",
            "1464\n",
            "1465\n",
            "1466\n",
            "1467\n",
            "1468\n",
            "1469\n",
            "1470\n",
            "1471\n",
            "1472\n",
            "1473\n",
            "1474\n",
            "1475\n",
            "1476\n",
            "1477\n",
            "1478\n",
            "1479\n",
            "1480\n",
            "1481\n",
            "1482\n",
            "1483\n",
            "1484\n",
            "1485\n",
            "1486\n",
            "1487\n",
            "1488\n",
            "1489\n",
            "1490\n",
            "1491\n",
            "1492\n",
            "1493\n",
            "1494\n",
            "1495\n",
            "1496\n",
            "1497\n",
            "1498\n",
            "1499\n",
            "1500\n",
            "1501\n",
            "1502\n",
            "1503\n",
            "1504\n",
            "1505\n",
            "1506\n",
            "1507\n",
            "1508\n",
            "1509\n",
            "1510\n",
            "1511\n",
            "1512\n",
            "1513\n",
            "1514\n",
            "1515\n",
            "1516\n",
            "1517\n",
            "1518\n",
            "1519\n",
            "1520\n",
            "1521\n",
            "1522\n",
            "1523\n",
            "1524\n",
            "1525\n",
            "1526\n",
            "1527\n",
            "1528\n",
            "1529\n",
            "1530\n",
            "1531\n",
            "1532\n",
            "1533\n",
            "1534\n",
            "1535\n",
            "1536\n",
            "1537\n",
            "1538\n",
            "1539\n",
            "1540\n",
            "1541\n",
            "1542\n",
            "1543\n",
            "1544\n",
            "1545\n",
            "1546\n",
            "1547\n",
            "1548\n",
            "1549\n",
            "1550\n",
            "1551\n",
            "1552\n",
            "1553\n",
            "1554\n",
            "1555\n",
            "1556\n",
            "1557\n",
            "1558\n",
            "1559\n",
            "1560\n",
            "1561\n",
            "1562\n",
            "1563\n",
            "1564\n",
            "1565\n",
            "1566\n",
            "1567\n",
            "1568\n",
            "1569\n",
            "1570\n",
            "1571\n",
            "1572\n",
            "1573\n",
            "1574\n",
            "1575\n",
            "1576\n",
            "1577\n",
            "1578\n",
            "1579\n",
            "1580\n",
            "1581\n",
            "1582\n",
            "1583\n",
            "1584\n",
            "1585\n",
            "1586\n",
            "1587\n",
            "1588\n",
            "1589\n",
            "1590\n",
            "1591\n",
            "1592\n",
            "1593\n",
            "1594\n",
            "1595\n",
            "1596\n",
            "1597\n",
            "1598\n",
            "1599\n",
            "1600\n",
            "1601\n",
            "1602\n",
            "1603\n",
            "1604\n",
            "1605\n",
            "1606\n",
            "1607\n",
            "1608\n",
            "1609\n",
            "1610\n",
            "1611\n",
            "1612\n",
            "1613\n",
            "1614\n",
            "1615\n",
            "1616\n",
            "1617\n",
            "1618\n",
            "1619\n",
            "1620\n",
            "1621\n",
            "1622\n",
            "1623\n",
            "1624\n",
            "1625\n",
            "1626\n",
            "1627\n",
            "1628\n",
            "1629\n",
            "1630\n",
            "1631\n",
            "1632\n",
            "1633\n",
            "1634\n",
            "1635\n",
            "1636\n",
            "1637\n",
            "1638\n",
            "1639\n",
            "1640\n",
            "1641\n",
            "1642\n",
            "1643\n",
            "1644\n",
            "1645\n",
            "1646\n",
            "1647\n",
            "1648\n",
            "1649\n",
            "1650\n",
            "1651\n",
            "1652\n",
            "1653\n",
            "1654\n",
            "1655\n",
            "1656\n",
            "1657\n",
            "1658\n",
            "1659\n",
            "1660\n",
            "1661\n",
            "1662\n",
            "1663\n",
            "1664\n",
            "1665\n",
            "1666\n",
            "1667\n",
            "1668\n",
            "1669\n",
            "1670\n",
            "1671\n",
            "1672\n",
            "1673\n",
            "1674\n",
            "1675\n",
            "1676\n",
            "1677\n",
            "1678\n",
            "1679\n",
            "1680\n",
            "1681\n",
            "1682\n",
            "1683\n",
            "1684\n",
            "1685\n",
            "1686\n",
            "1687\n",
            "1688\n",
            "1689\n",
            "1690\n",
            "1691\n",
            "1692\n",
            "1693\n",
            "1694\n",
            "1695\n",
            "1696\n",
            "1697\n",
            "1698\n",
            "1699\n",
            "1700\n",
            "1701\n",
            "1702\n",
            "1703\n",
            "1704\n",
            "1705\n",
            "1706\n",
            "1707\n",
            "1708\n",
            "1709\n",
            "1710\n",
            "1711\n",
            "1712\n",
            "1713\n",
            "1714\n",
            "1715\n",
            "1716\n",
            "1717\n",
            "1718\n",
            "1719\n",
            "1720\n",
            "1721\n",
            "1722\n",
            "1723\n",
            "1724\n",
            "1725\n",
            "1726\n",
            "1727\n",
            "1728\n",
            "1729\n",
            "1730\n",
            "1731\n",
            "1732\n",
            "1733\n",
            "1734\n",
            "1735\n",
            "1736\n",
            "1737\n",
            "1738\n",
            "1739\n",
            "1740\n",
            "1741\n",
            "1742\n",
            "1743\n",
            "1744\n",
            "1745\n",
            "1746\n",
            "1747\n",
            "1748\n",
            "1749\n",
            "1750\n",
            "1751\n",
            "1752\n",
            "1753\n",
            "1754\n",
            "1755\n",
            "1756\n",
            "1757\n",
            "1758\n",
            "1759\n",
            "1760\n",
            "1761\n",
            "1762\n",
            "1763\n",
            "1764\n",
            "1765\n",
            "1766\n",
            "1767\n",
            "1768\n",
            "1769\n",
            "1770\n",
            "1771\n",
            "1772\n",
            "1773\n",
            "1774\n",
            "1775\n",
            "1776\n",
            "1777\n",
            "1778\n",
            "1779\n",
            "1780\n",
            "1781\n",
            "1782\n",
            "1783\n",
            "1784\n",
            "1785\n",
            "1786\n",
            "1787\n",
            "1788\n",
            "1789\n",
            "1790\n",
            "1791\n",
            "1792\n",
            "1793\n",
            "1794\n",
            "1795\n",
            "1796\n",
            "1797\n",
            "1798\n",
            "1799\n",
            "1800\n",
            "1801\n",
            "1802\n",
            "1803\n",
            "1804\n",
            "1805\n",
            "1806\n",
            "1807\n",
            "1808\n",
            "1809\n",
            "1810\n",
            "1811\n",
            "1812\n",
            "1813\n",
            "1814\n",
            "1815\n",
            "1816\n",
            "1817\n",
            "1818\n",
            "1819\n",
            "1820\n",
            "1821\n",
            "1822\n",
            "1823\n",
            "1824\n",
            "1825\n",
            "1826\n",
            "1827\n",
            "1828\n",
            "1829\n",
            "1830\n",
            "1831\n",
            "[array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431596,  0.13638167, ..., -0.0868708 ,\n",
            "        -0.1143939 , -0.01297866]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.0305799 ,  0.02431598,  0.13638173, ..., -0.08687073,\n",
            "        -0.11439389, -0.01297868]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431592,  0.13638178, ..., -0.08687069,\n",
            "        -0.11439398, -0.01297879]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431594,  0.13638178, ..., -0.08687065,\n",
            "        -0.11439399, -0.0129787 ]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431607,  0.13638169, ..., -0.0868708 ,\n",
            "        -0.11439399, -0.0129786 ]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.0305798 ,  0.02431601,  0.13638173, ..., -0.08687083,\n",
            "        -0.1143939 , -0.01297869]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057992,  0.02431593,  0.13638172, ..., -0.08687077,\n",
            "        -0.11439388, -0.01297869]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.024316  ,  0.1363818 , ..., -0.08687072,\n",
            "        -0.11439392, -0.01297864]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057983,  0.024316  ,  0.13638163, ..., -0.0868708 ,\n",
            "        -0.11439398, -0.01297867]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431596,  0.13638167, ..., -0.0868708 ,\n",
            "        -0.1143939 , -0.01297866]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.0305799 ,  0.02431598,  0.13638173, ..., -0.08687073,\n",
            "        -0.11439389, -0.01297868]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431592,  0.13638178, ..., -0.08687069,\n",
            "        -0.11439398, -0.01297879]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431594,  0.13638178, ..., -0.08687065,\n",
            "        -0.11439399, -0.0129787 ]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431607,  0.13638169, ..., -0.0868708 ,\n",
            "        -0.11439399, -0.0129786 ]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.0305798 ,  0.02431601,  0.13638173, ..., -0.08687083,\n",
            "        -0.1143939 , -0.01297869]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057992,  0.02431593,  0.13638172, ..., -0.08687077,\n",
            "        -0.11439388, -0.01297869]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.024316  ,  0.1363818 , ..., -0.08687072,\n",
            "        -0.11439392, -0.01297864]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057983,  0.024316  ,  0.13638163, ..., -0.0868708 ,\n",
            "        -0.11439398, -0.01297867]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431596,  0.13638167, ..., -0.0868708 ,\n",
            "        -0.1143939 , -0.01297866]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.0305799 ,  0.02431598,  0.13638173, ..., -0.08687073,\n",
            "        -0.11439389, -0.01297868]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057986,  0.02431592,  0.13638178, ..., -0.08687069,\n",
            "        -0.11439398, -0.01297879]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32), array([[ 0.03057989,  0.02431589,  0.1363818 , ..., -0.08687075,\n",
            "        -0.11439396, -0.01297877]], dtype=float32)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random = pd.DataFrame(features[:][0][:])\n",
        "random.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "yc_l4FzYrAOB",
        "outputId": "80709b47-9be3-4ea9-80e6-b9af2c928782"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6     \\\n",
              "count  1.00000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000   \n",
              "mean   0.03058  0.024316  0.136382  0.032959 -0.065275 -0.136095 -0.046492   \n",
              "std        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "min    0.03058  0.024316  0.136382  0.032959 -0.065275 -0.136095 -0.046492   \n",
              "25%    0.03058  0.024316  0.136382  0.032959 -0.065275 -0.136095 -0.046492   \n",
              "50%    0.03058  0.024316  0.136382  0.032959 -0.065275 -0.136095 -0.046492   \n",
              "75%    0.03058  0.024316  0.136382  0.032959 -0.065275 -0.136095 -0.046492   \n",
              "max    0.03058  0.024316  0.136382  0.032959 -0.065275 -0.136095 -0.046492   \n",
              "\n",
              "           7         8         9     ...      1014      1015      1016  \\\n",
              "count  1.000000  1.000000  1.000000  ...  1.000000  1.000000  1.000000   \n",
              "mean   0.032434  0.011008 -0.019854  ...  0.057032 -0.042408 -0.028761   \n",
              "std         NaN       NaN       NaN  ...       NaN       NaN       NaN   \n",
              "min    0.032434  0.011008 -0.019854  ...  0.057032 -0.042408 -0.028761   \n",
              "25%    0.032434  0.011008 -0.019854  ...  0.057032 -0.042408 -0.028761   \n",
              "50%    0.032434  0.011008 -0.019854  ...  0.057032 -0.042408 -0.028761   \n",
              "75%    0.032434  0.011008 -0.019854  ...  0.057032 -0.042408 -0.028761   \n",
              "max    0.032434  0.011008 -0.019854  ...  0.057032 -0.042408 -0.028761   \n",
              "\n",
              "           1017      1018      1019      1020      1021      1022      1023  \n",
              "count  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  1.000000  \n",
              "mean   0.025556 -0.128086 -0.130842  0.026239 -0.086871 -0.114394 -0.012979  \n",
              "std         NaN       NaN       NaN       NaN       NaN       NaN       NaN  \n",
              "min    0.025556 -0.128086 -0.130842  0.026239 -0.086871 -0.114394 -0.012979  \n",
              "25%    0.025556 -0.128086 -0.130842  0.026239 -0.086871 -0.114394 -0.012979  \n",
              "50%    0.025556 -0.128086 -0.130842  0.026239 -0.086871 -0.114394 -0.012979  \n",
              "75%    0.025556 -0.128086 -0.130842  0.026239 -0.086871 -0.114394 -0.012979  \n",
              "max    0.025556 -0.128086 -0.130842  0.026239 -0.086871 -0.114394 -0.012979  \n",
              "\n",
              "[8 rows x 1024 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c94a5836-2bdd-42d1-8aa0-c913f7e84003\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>1014</th>\n",
              "      <th>1015</th>\n",
              "      <th>1016</th>\n",
              "      <th>1017</th>\n",
              "      <th>1018</th>\n",
              "      <th>1019</th>\n",
              "      <th>1020</th>\n",
              "      <th>1021</th>\n",
              "      <th>1022</th>\n",
              "      <th>1023</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.03058</td>\n",
              "      <td>0.024316</td>\n",
              "      <td>0.136382</td>\n",
              "      <td>0.032959</td>\n",
              "      <td>-0.065275</td>\n",
              "      <td>-0.136095</td>\n",
              "      <td>-0.046492</td>\n",
              "      <td>0.032434</td>\n",
              "      <td>0.011008</td>\n",
              "      <td>-0.019854</td>\n",
              "      <td>...</td>\n",
              "      <td>0.057032</td>\n",
              "      <td>-0.042408</td>\n",
              "      <td>-0.028761</td>\n",
              "      <td>0.025556</td>\n",
              "      <td>-0.128086</td>\n",
              "      <td>-0.130842</td>\n",
              "      <td>0.026239</td>\n",
              "      <td>-0.086871</td>\n",
              "      <td>-0.114394</td>\n",
              "      <td>-0.012979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.03058</td>\n",
              "      <td>0.024316</td>\n",
              "      <td>0.136382</td>\n",
              "      <td>0.032959</td>\n",
              "      <td>-0.065275</td>\n",
              "      <td>-0.136095</td>\n",
              "      <td>-0.046492</td>\n",
              "      <td>0.032434</td>\n",
              "      <td>0.011008</td>\n",
              "      <td>-0.019854</td>\n",
              "      <td>...</td>\n",
              "      <td>0.057032</td>\n",
              "      <td>-0.042408</td>\n",
              "      <td>-0.028761</td>\n",
              "      <td>0.025556</td>\n",
              "      <td>-0.128086</td>\n",
              "      <td>-0.130842</td>\n",
              "      <td>0.026239</td>\n",
              "      <td>-0.086871</td>\n",
              "      <td>-0.114394</td>\n",
              "      <td>-0.012979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.03058</td>\n",
              "      <td>0.024316</td>\n",
              "      <td>0.136382</td>\n",
              "      <td>0.032959</td>\n",
              "      <td>-0.065275</td>\n",
              "      <td>-0.136095</td>\n",
              "      <td>-0.046492</td>\n",
              "      <td>0.032434</td>\n",
              "      <td>0.011008</td>\n",
              "      <td>-0.019854</td>\n",
              "      <td>...</td>\n",
              "      <td>0.057032</td>\n",
              "      <td>-0.042408</td>\n",
              "      <td>-0.028761</td>\n",
              "      <td>0.025556</td>\n",
              "      <td>-0.128086</td>\n",
              "      <td>-0.130842</td>\n",
              "      <td>0.026239</td>\n",
              "      <td>-0.086871</td>\n",
              "      <td>-0.114394</td>\n",
              "      <td>-0.012979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.03058</td>\n",
              "      <td>0.024316</td>\n",
              "      <td>0.136382</td>\n",
              "      <td>0.032959</td>\n",
              "      <td>-0.065275</td>\n",
              "      <td>-0.136095</td>\n",
              "      <td>-0.046492</td>\n",
              "      <td>0.032434</td>\n",
              "      <td>0.011008</td>\n",
              "      <td>-0.019854</td>\n",
              "      <td>...</td>\n",
              "      <td>0.057032</td>\n",
              "      <td>-0.042408</td>\n",
              "      <td>-0.028761</td>\n",
              "      <td>0.025556</td>\n",
              "      <td>-0.128086</td>\n",
              "      <td>-0.130842</td>\n",
              "      <td>0.026239</td>\n",
              "      <td>-0.086871</td>\n",
              "      <td>-0.114394</td>\n",
              "      <td>-0.012979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.03058</td>\n",
              "      <td>0.024316</td>\n",
              "      <td>0.136382</td>\n",
              "      <td>0.032959</td>\n",
              "      <td>-0.065275</td>\n",
              "      <td>-0.136095</td>\n",
              "      <td>-0.046492</td>\n",
              "      <td>0.032434</td>\n",
              "      <td>0.011008</td>\n",
              "      <td>-0.019854</td>\n",
              "      <td>...</td>\n",
              "      <td>0.057032</td>\n",
              "      <td>-0.042408</td>\n",
              "      <td>-0.028761</td>\n",
              "      <td>0.025556</td>\n",
              "      <td>-0.128086</td>\n",
              "      <td>-0.130842</td>\n",
              "      <td>0.026239</td>\n",
              "      <td>-0.086871</td>\n",
              "      <td>-0.114394</td>\n",
              "      <td>-0.012979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.03058</td>\n",
              "      <td>0.024316</td>\n",
              "      <td>0.136382</td>\n",
              "      <td>0.032959</td>\n",
              "      <td>-0.065275</td>\n",
              "      <td>-0.136095</td>\n",
              "      <td>-0.046492</td>\n",
              "      <td>0.032434</td>\n",
              "      <td>0.011008</td>\n",
              "      <td>-0.019854</td>\n",
              "      <td>...</td>\n",
              "      <td>0.057032</td>\n",
              "      <td>-0.042408</td>\n",
              "      <td>-0.028761</td>\n",
              "      <td>0.025556</td>\n",
              "      <td>-0.128086</td>\n",
              "      <td>-0.130842</td>\n",
              "      <td>0.026239</td>\n",
              "      <td>-0.086871</td>\n",
              "      <td>-0.114394</td>\n",
              "      <td>-0.012979</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 1024 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c94a5836-2bdd-42d1-8aa0-c913f7e84003')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c94a5836-2bdd-42d1-8aa0-c913f7e84003 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c94a5836-2bdd-42d1-8aa0-c913f7e84003');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e0a33fc2-5957-4428-b996-255f54a73bf0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e0a33fc2-5957-4428-b996-255f54a73bf0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e0a33fc2-5957-4428-b996-255f54a73bf0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WAIeO6kUzyXv"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
